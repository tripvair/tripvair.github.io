openapi: 3.0.0
info:
  title: TripVair AI API
  description: ''
  contact: {}
  version: '1.0.0'
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
paths:
  /airports:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_all_airports
      description: >
        Returns the ICAO identifiers of all known airports. For airports that

        do not have an ICAO identifier, the FAA LID identifier will be used.

        Links for further information about each airport are included.
      operationId: get_all_airports
      parameters:
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: Returns a list of airports
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airport
      description: >
        Returns information about an airport given an ICAO or LID airport code

        such as KLAX, KIAH, O07, etc. Data returned includes airport name,

        city, state (when known), latitude, longitude, and timezone.
      operationId: get_airport
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      responses:
        '200':
          description: Information about the requested airport.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid airport code and cannot be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/canonical:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airports_canonical
      description: >
        Returns a list of ICAO airport codes corresponding to the given IATA or LID airport code.

        IATA codes can be identical to some LID codes, so if id_type is specified, only 1 ICAO

        code will be returned. If no id_type is specified and there are two possible ICAO codes,

        both will be returned.
      operationId: get_airports_canonical
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: id_type
        in: query
        description: Type of airport code provided in the id parameter
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Id must be a valid airport code and id_type must be 'icao', 'iata', or 'lid'.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/nearby:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airports_near_airport
      description: >
        Returns a list of airports located within a given distance from the

        specified airport.
      operationId: get_airports_near_airport
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: radius
        in: query
        description: The search radius to use for finding nearby airports (statue miles)
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: only_iap
        in: query
        description: >-
          Return only nearby airports with Instrument Approaches (also limits

          results to North American airports)
        style: form
        explode: true
        schema:
          type: string
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Id must be a valid airport code and cannot be empty, radius > 0.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/nearby:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_nearby_airports
      description: >
        Returns a list of airports located within a given distance from the

        given location.
      operationId: get_nearby_airports
      parameters:
      - name: latitude
        in: query
        description: The latitude of the point used to search for nearby airports
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: longitude
        in: query
        description: The longitude of the point used to search for nearby airports
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: radius
        in: query
        description: The search radius to use for finding nearby airports (statue miles)
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: only_iap
        in: query
        description: >-
          Return only nearby airports with Instrument Approaches (also limits

          results to North American airports)
        style: form
        explode: true
        schema:
          type: string
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 'Incorrect parameter(s). Expected: numerical latitude and longitude, radius > 0.'
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/delays:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airport_delays
      description: >
        Returns a list of reason codes for delays at a specific airport. There

        may be multiple reasons returned if there are multiple types of delays

        reported at an airport. Note that individual flights may be delayed

        without there being an airport delay returned by this endpoint.
      operationId: get_airport_delays
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid airport code and cannot be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/flights:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airport_flights
      description: >
        Returns all recent and upcoming flights departing from or arriving at

        the specified airport. Filtering/ordering behavior for the optional

        start and end parameters for each type (`scheduled_departures`,

        `scheduled_arrivals`, `departures`, `arrivals`) match the behavior in

        their corresponding endpoints.
      operationId: get_airport_flights
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: airline
        in: query
        description: Airline to filter flights by. Do not provide airline if type is provided.
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: Type of flights to return. Do not provide type if airline is provided.
        style: form
        explode: true
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results. The format is ISO8601 date

          or datetime, and the bound is inclusive. Specified start date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results. The format is ISO8601 date

          or datetime, and the bound is exclusive. Specified end date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid airport code and cannot be empty. Airline and type query params cannot both be set.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/flights/departures:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airport_flights_departed
      description: >
        Returns flights that have departed from an airport and not been

        diverted, ordered by `actual_off` descending. The optional start and

        end parameters will be compared against `actual_off` to limit the

        flights returned. The start parameter's default value is 24 hours

        before the current time. The end parameter's default value is the

        current time.
      operationId: get_airport_flights_departed
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: airline
        in: query
        description: Airline to filter flights by. Do not provide airline if type is provided.
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: Type of flights to return. Do not provide type if airline is provided.
        style: form
        explode: true
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results. The format is ISO8601 date

          or datetime, and the bound is inclusive. Specified start date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results. The format is ISO8601 date

          or datetime, and the bound is exclusive. Specified end date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Id must be a valid airport code and cannot be empty. Airline and type query params cannot both be set.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/flights/arrivals:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airport_flights_arrived
      description: >
        Returns flights that have arrived at an airport, orderd by

        `actual_on` descending. The start parameter's default value is 24 hours

        before the current time. The end parameter's default value is the

        current time.
      operationId: get_airport_flights_arrived
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: airline
        in: query
        description: Airline to filter flights by. Do not provide airline if type is provided.
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: Type of flights to return. Do not provide type if airline is provided.
        style: form
        explode: true
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results. The format is ISO8601 date

          or datetime, and the bound is inclusive. Specified start date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results. The format is ISO8601 date

          or datetime, and the bound is exclusive. Specified end date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Id must be a valid airport code and cannot be empty. Airline and type query params cannot both be set.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/flights/scheduled_arrivals:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airport_flights_scheduled_arrivals
      description: >
        Returns flights that are expected to arrive at an airport. This can

        include both undeparted and en route flights. Flights are ordered by

        `estimated_on` ascending. The optional start and end parameters will

        be compared against `estimated_on` to limit the flights returned. The

        start parameter's default value is 48 hours before the current time

        (this accounts for delayed flights). The end parameter's default value

        is 24 hours after the current time.
      operationId: get_airport_flights_scheduled_arrivals
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: airline
        in: query
        description: Airline to filter flights by. Do not provide airline if type is provided.
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: Type of flights to return. Do not provide type if airline is provided.
        style: form
        explode: true
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results. The format is ISO8601 date

          or datetime, and the bound is inclusive. Specified start date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results. The format is ISO8601 date

          or datetime, and the bound is exclusive. Specified end date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Id must be a valid airport code and cannot be empty. Airline and type query params cannot both be set.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/flights/to/{dest_id}:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_flights_between_airports
      description: >
        This endpoint is quite similar to the `FindFlight` operator in prior

        versions of AeroAPI. Results may include both non-stop and one-stop

        flights. Note that because the returned flights can include multiple

        legs, the response format differs from most other flight-returning

        endpoints. If the optional start or end query parameters are not

        provided start will default to 1 day in the future, while end will

        default to 7 days in the past relative to the time the query is made.
      operationId: get_flights_between_airports
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: dest_id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: type
        in: query
        description: Type of flights to return.
        style: form
        explode: true
        schema:
          type: string
      - name: connection
        in: query
        description: >-
          Whether flights should be filtered based on their connection status.

          Leaving this blank will result in a mix of flights being returned, with

          a preference for nonstop flights. One-stop flights are identified with

          a custom heuristic.
        style: form
        explode: true
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results. The format is ISO8601 date

          or datetime, and the bound is inclusive. Specified start date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results. The format is ISO8601 date

          or datetime, and the bound is exclusive. Specified end date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Id and dest_id must be valid airport codes and cannot be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/delays:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_delays_for_all_airports
      description: >
        Returns a list of airports with delays. There may be multiple reasons

        returned per airport if there are multiple types of delays reported at

        an airport. Note that individual flights can be delayed without there

        being an airport-wide delay returned by this endpoint.
      operationId: get_delays_for_all_airports
      parameters:
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/flights/scheduled_departures:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airport_flights_scheduled_departures
      description: >
        Returns flights that are scheduled to depart from an airport or have

        recently been cancelled, ordered by `estimated_off` (or `scheduled_off`

        if `estimated_off` is missing) ascending. The optional start and end

        parameters will be compared against `scheduled_off` to limit the

        flights returned. The start parameter's default value is 2 hours before

        the current time. The end parameter's default value is 24 hours after

        the current time.
      operationId: get_airport_flights_scheduled_departures
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: airline
        in: query
        description: Airline to filter flights by. Do not provide airline if type is provided.
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: Type of flights to return. Do not provide type if airline is provided.
        style: form
        explode: true
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results. The format is ISO8601 date

          or datetime, and the bound is inclusive. Specified start date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results. The format is ISO8601 date

          or datetime, and the bound is exclusive. Specified end date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Id must be a valid airport code and cannot be empty. Airline and type query params cannot both be set.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/weather/observations:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airport_weather_observations
      description: >
        Returns weather for an airport in the form of a decoded METAR, starting

        from the latest report and working backwards in time as more data is

        requested. Data is provided in parsed, human-readable, and raw

        formats.
      operationId: get_airport_weather_observations
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: temperature_units
        in: query
        description: Units to use for temperature fields.
        style: form
        explode: true
        schema:
          type: string
      - name: return_nearby_weather
        in: query
        description: >-
          If the requested airport does not have a weather conditions report then

          the weather for the nearest airport within 30 miles will be returned

          instead.
        style: form
        explode: true
        schema:
          type: string
      - name: timestamp
        in: query
        description: >-
          Timestamp from which to begin returning weather data in a 1 day range.

          Because weather data is returned in reverse chronological order, all

          returned weather reports will be from before this timestamp. If unspecified,

          weather is returned starting from now up to or less than the user history limit,

          normally 14 days.
        style: form
        explode: true
        schema:
          type: string
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid airport code and cannot be empty. Temperature_units may be invalid. Timestamp may be before user's history limit.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/flights/counts:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airport_flights_count
      description: >
        Returns counts of flights for an airport broken down by flight status.

        The returned categories are subtly different from what is returned from

        the `/airports/{id}/flights` endpoints. Specifically, this operation

        does not include completed flights in its counts, and it does not count

        cancelled/diverted flights. It also does not strictly bound the time

        for which scheduled flights are counted, so all future flights that

        TripVair knows about are included in the counts. See the response

        schema and documentation for the airport flights endpoints for more

        information.
      operationId: get_airport_flights_count
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid airport code and cannot be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/weather/forecast:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_airport_weather_forecast
      description: >
        Returns the weather forecast for an airport in the form of a decoded TAF

        (Terminal Area Forecast). Only a single result is returned.
      operationId: get_airport_weather_forecast
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: timestamp
        in: query
        description: >-
          Timestamp from which to begin returning weather data in a 1 day range.

          Because weather data is returned in reverse chronological order, all

          returned weather reports will be from before this timestamp. If unspecified,

          weather is returned starting from now up to or less than the user history limit,

          normally 14 days.
        style: form
        explode: true
        schema:
          type: string
      - name: return_nearby_weather
        in: query
        description: >-
          If the requested airport does not have a weather conditions report then

          the weather for the nearest airport within 30 miles will be returned

          instead.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid airport code and cannot be empty. Temperature_units may be invalid. Timestamp may be before user's history limit.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '404':
          description: No upcoming forecast currently available for this airport.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /airports/{id}/routes/{dest_id}:
    get:
      tags:
      - TripVair AI API/v1/airports
      summary: get_routes_between_airports
      description: >
        Returns information about assigned IFR routings between two airports.
      operationId: get_routes_between_airports
      parameters:
      - name: id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: dest_id
        in: path
        description: ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.
        required: true
        style: simple
        schema:
          type: string
          example: KIAH
      - name: sort_by
        in: query
        description: >-
          Field to sort results by. "count" will sort results by the route

          filing count (descending). "last_departure_time" will sort results by

          the latest scheduled departure time for that route (descending).
        style: form
        explode: true
        schema:
          type: string
      - name: max_file_age
        in: query
        description: >-
          Maximum filed plan age of flights to consider. Can be a value less

          than or equal to 14 days (2 weeks) OR 1 month OR 1 year.
        style: form
        explode: true
        schema:
          type: string
          example: 6 days
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Id and dest_id must be valid airport codes and cannot be empty. Max_file_age must be one of the specified values.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/{id}/position:
    get:
      tags:
      - TripVair AI API/v1/flights
      summary: get_flight_position
      description: Returns the latest position for a flight
      operationId: get_flight_position
      parameters:
      - name: id
        in: path
        description: The fa_flight_id to fetch
        required: true
        style: simple
        schema:
          type: string
          example: UAL1234-1234567890-airline-0123
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id may be missing or may not be fa_flight_id format.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/{ident}:
    get:
      tags:
      - TripVair AI API/v1/flights
      summary: get_flight
      description: >
        Returns the flight info status summary for a registration, ident, or

        fa_flight_id.  If a fa_flight_id is specified then a maximum of 1

        flight is returned, unless the flight has been diverted in which case

        both the original flight and any diversions will be returned with a

        duplicate fa_flight_id. If a registration or ident is specified,

        approximately 14 days of recent and scheduled flight information is

        returned, ordered by `scheduled_out` (or `scheduled_off` if

        `scheduled_out` is missing) descending. Alternately, specify a start

        and end parameter to find your flight(s) of interest, including up to

        10 days of flight history.
      operationId: get_flight
      parameters:
      - name: ident
        in: path
        description: The ident, registration, or fa_flight_id to fetch
        required: true
        style: simple
        schema:
          type: string
          example: UAL4
      - name: ident_type
        in: query
        description: >-
          Type of ident provided in the ident parameter. By default, the passed

          ident is interpreted as a registration if possible. This parameter can

          force the ident to be interpreted as a designator instead.
        style: form
        explode: true
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results, comparing against flights'

          `scheduled_out` field (or `scheduled_off` if `scheduled_out` is

          missing). The format is ISO8601 date or datetime, and the bound is

          inclusive. Specified start date must be no further than 10 days in the

          past and 2 days in the future. If not specified, will default to

          departures starting approximately 11 days in the past. If using date

          instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results, comparing against flights'

          `scheduled_out` field (or `scheduled_off` if `scheduled_out` is

          missing). The format is ISO8601 date or datetime, and the bound is

          exclusive. Specified end date must be no further than 10 days in the

          past and 2 days in the future. If not specified, will default to

          departures starting approximately 2 days in the future. If using date

          instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Ident may be missing or not in fa_flight_id format or pages may be < 1.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/search/advanced:
    get:
      tags:
      - TripVair AI API/v1/flights
      summary: get_flights_by_advanced_search
      description: >
        Returns currently or recently airborne flights based on geospatial

        search parameters.


        Query parameters include a latitude/longitude box, aircraft ident with

        wildcards, type with wildcards, prefix, origin airport,

        destination airport, origin or destination airport, groundspeed, and

        altitude. It takes search terms in a single string comprising of

        {operator key value} elements and returns an array of flight

        structures. Each search term must be enclosed in curly braces. Multiple

        search terms can be combined in an implicit boolean "and" by separating

        the terms with at least one space. This function only searches flight

        data representing approximately the last 24 hours. Codeshares and

        alternate idents are NOT searched when matching against the ident key.


        The supported operators include (note that operators take different numbers of arguments):


        * false - results must have the specified boolean key set to a value of false. Example: {false arrived}

        * true - results must have the specified boolean key set to a value of true. Example: {true lifeguard}

        * null - results must have the specified key set to a null value. Example: {null waypoints}

        * notnull - results must have the specified key not set to a null value. Example: {notnull aircraftType}

        * = - results must have a key that exactly matches the specified value. Example: {= aircraftType C172}

        * != - results must have a key that must not match the specified value. Example: {!= prefix H}

        * < - results must have a key that is lexicographically less-than a specified value. Example: {< arrivalTime 1276811040}

        * \> - results must have a key that is lexicographically greater-than a specified value. Example: {> circles 5}

        * <= - results must have a key that is lexicographically less-than-or-equal-to a specified value. Example: {<= alt 8000}

        * \>= - results must have a key that is lexicographically greater-than-or-equal-to a specified value.

        * match - results must have a key that matches against a case-insensitive wildcard pattern. Example: {match ident AAL*}

        * notmatch - results must have a key that does not match against a case-insensitive wildcard pattern. Example: {notmatch aircraftType B76*}

        * range - results must have a key that is numerically between the two specified values. Example: {range alt 8000 20000}

        * in - results must have a key that exactly matches one of the specified values. Example: {in orig {KLAX KBUR KSNA KLGB}}

        * orig_or_dest - results must have either the origin or destination key exactly match one of the specified values. Example: {orig_or_dest {KLAX KBUR KSNA KLGB}}

        * airline - results will only include airline flight if the argument is 1, or will only include GA flights if the argument is 0. Example: {airline 1}

        * aircraftType - results must have an aircraftType key that matches one of the specified case-insensitive wildcard patterns. Example: {aircraftType {B76* B77*}}

        * ident - results must have an ident key that matches one of the specified case-insensitive wildcard patterns. Example: {ident {N123* N456* AAL* UAL*}}

        * ident_or_reg - results must have an ident key or was known to be operated by an aircraft registration that matches one of the specified case-insensitive wildcard patterns. Example: {ident_or_reg {N123* N456* AAL* UAL*}}


        The supported key names include (note that not all of these key names are returned in the result structure, and some have slightly different names):


        * actualDepartureTime - Actual time of departure, or null if not departed yet. UNIX epoch timestamp seconds since 1970

        * aircraftType - aircraft type ID (for example: B763)

        * alt - altitude at last reported position (hundreds of feet or Flight Level)

        * altChange - altitude change indication (for example: "C" if climbing, "D" if descending, and empty if it is level)

        * arrivalTime - Actual time of arrival, or null if not arrived yet. UNIX epoch timestamp seconds since 1970

        * arrived - true if the flight has arrived at its destination.

        * cancelled - true if the flight has been cancelled. The meaning of cancellation is that the flight is no longer being tracked by TripVair. There are a number of reasons a flight may be cancelled including cancellation by the airline, but that will not always be the case.

        * cdt - Controlled Departure Time, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970

        * clock - Time of last received position. UNIX epoch timestamp seconds since 1970

        * cta - Controlled Time of Arrival, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970

        * dest - ICAO airport code of destination (for example: KLAX)

        * edt - Estimated Departure Time. Epoch timestamp seconds since 1970

        * eta - Estimated Time of Arrival. Epoch timestamp seconds since 1970

        * fdt - Field Departure Time. UNIX epoch timestamp seconds since 1970

        * firstPositionTime - Time when first reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970

        * fixes - intersections and/or VORs along the route (for example: SLS AMERO ARTOM VODIR NOTOS ULAPA ACA NUXCO OLULA PERAS ALIPO UPN GDL KEDMA BRISA CUL PERTI CEN PPE ALTAR ASUTA JLI RONLD LAADY WYVIL OLDEE RAL PDZ ARNES BASET WELLZ CIVET)

        * fp - unique identifier assigned by TripVair for this flight, aka fa_flight_id.

        * gs - ground speed at last reported position, in kts.

        * heading - direction of travel at last reported position.

        * hiLat - highest latitude travelled by flight.

        * hiLon - highest longitude travelled by flight.

        * ident - flight identifier or registration of aircraft.

        * lastPositionTime - Time when last reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970.

        * lat - latitude of last reported position.

        * lifeguard - true if a "lifeguard" rescue flight.

        * lon - longitude of last reported position.

        * lowLat - lowest latitude travelled by flight.

        * lowLon - lowest longitude travelled by flight.

        * ogta - Original Time of Arrival. UNIX epoch timestamp seconds since 1970

        * ogtd - Original Time of Departure. UNIX epoch timestamp seconds since 1970

        * orig - ICAO airport code of origin (for example: KIAH)

        * physClass - physical class (for example: J is jet)

        * prefix - A one or two character identifier prefix code (common values: G or GG Medevac, L Lifeguard, A Air Taxi, H Heavy, M Medium).

        * speed - ground speed, in kts.

        * status - Single letter code for current flight status, can be S Scheduled, F Filed, A Active, Z Completed, or X Cancelled.

        * updateType - data source of last position (P=projected, O=oceanic, Z=radar, A=ADS-B, M=multilateration, D=datalink, X=surface and near surface (ADS-B and ASDE-X), S=space-based).

        * waypoints - all of the intersections and VORs comprising the route
      operationId: get_flights_by_advanced_search
      parameters:
      - name: query
        in: query
        description: >-
          Query to search for recent or airborne flights. Search criteria is only

          applied to the most recent position for a flight. This function only

          searches flights within approximately the last 24 hours. The supported

          operators include (note that operators take different numbers of

          arguments):


          * false - results must have the specified boolean key set to a value of false. Example: {false arrived}

          * true - results must have the specified boolean key set to a value of true. Example: {true lifeguard}

          * null - results must have the specified key set to a null value. Example: {null waypoints}

          * notnull - results must have the specified key not set to a null value. Example: {notnull aircraftType}

          * = - results must have a key that exactly matches the specified value. Example: {= aircraftType C172}

          * != - results must have a key that must not match the specified value. Example: {!= prefix H}

          * < - results must have a key that is lexicographically less-than a specified value. Example: {< arrivalTime 1276811040}

          * \> - results must have a key that is lexicographically greater-than a specified value. Example: {> circles 5}

          * <= - results must have a key that is lexicographically less-than-or-equal-to a specified value. Example: {<= alt 8000}

          * \>= - results must have a key that is lexicographically greater-than-or-equal-to a specified value.

          * match - results must have a key that matches against a case-insensitive wildcard pattern. Example: {match ident AAL*}

          * notmatch - results must have a key that does not match against a case-insensitive wildcard pattern. Example: {notmatch aircraftType B76*}

          * range - results must have a key that is numerically between the two specified values. Example: {range alt 8000 20000}

          * in - results must have a key that exactly matches one of the specified values. Example: {in orig {KLAX KBUR KSNA KLGB}}

          * orig_or_dest - results must have either the origin or destination key exactly match one of the specified values. Example: {orig_or_dest {KLAX KBUR KSNA KLGB}}

          * airline - results will only include airline flight if the argument is 1, or will only include GA flights if the argument is 0. Example: {airline 1}

          * aircraftType - results must have an aircraftType key that matches one of the specified case-insensitive wildcard patterns. Example: {aircraftType {B76* B77*}}

          * ident - results must have an ident key that matches one of the specified case-insensitive wildcard patterns. Example: {ident {N123* N456* AAL* UAL*}}

          * ident_or_reg - results must have an ident key or was known to be operated by an aircraft registration that matches one of the specified case-insensitive wildcard patterns. Example: {ident_or_reg {N123* N456* AAL* UAL*}}


          The supported key names include (note that not all of these key names are returned in the result structure, and some have slightly different names):


          * actualDepartureTime - Actual time of departure, or null if not departed yet. UNIX epoch timestamp seconds since 1970

          * aircraftType - aircraft type ID (for example: B763)

          * alt - altitude at last reported position (hundreds of feet or Flight Level)

          * altChange - altitude change indication (for example: "C" if climbing, "D" if descending, and empty if it is level)

          * arrivalTime - Actual time of arrival, or null if not arrived yet. UNIX epoch timestamp seconds since 1970

          * arrived - true if the flight has arrived at its destination.

          * cancelled - true if the flight has been cancelled. The meaning of cancellation is that the flight is no longer being tracked by TripVair. There are a number of reasons a flight may be cancelled including cancellation by the airline, but that will not always be the case.

          * cdt - Controlled Departure Time, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970

          * clock - Time of last received position. UNIX epoch timestamp seconds since 1970

          * cta - Controlled Time of Arrival, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970

          * dest - ICAO airport code of destination (for example: KLAX)

          * edt - Estimated Departure Time. Epoch timestamp seconds since 1970

          * eta - Estimated Time of Arrival. Epoch timestamp seconds since 1970

          * fdt - Field Departure Time. UNIX epoch timestamp seconds since 1970

          * firstPositionTime - Time when first reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970

          * fixes - intersections and/or VORs along the route (for example: SLS AMERO ARTOM VODIR NOTOS ULAPA ACA NUXCO OLULA PERAS ALIPO UPN GDL KEDMA BRISA CUL PERTI CEN PPE ALTAR ASUTA JLI RONLD LAADY WYVIL OLDEE RAL PDZ ARNES BASET WELLZ CIVET)

          * fp - unique identifier assigned by TripVair for this flight, aka fa_flight_id.

          * gs - ground speed at last reported position, in kts.

          * heading - direction of travel at last reported position.

          * hiLat - highest latitude travelled by flight.

          * hiLon - highest longitude travelled by flight.

          * ident - flight identifier or registration of aircraft.

          * lastPositionTime - Time when last reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970.

          * lat - latitude of last reported position.

          * lifeguard - true if a "lifeguard" rescue flight.

          * lon - longitude of last reported position.

          * lowLat - lowest latitude travelled by flight.

          * lowLon - lowest longitude travelled by flight.

          * ogta - Original Time of Arrival. UNIX epoch timestamp seconds since 1970

          * ogtd - Original Time of Departure. UNIX epoch timestamp seconds since 1970

          * orig - ICAO airport code of origin (for example: KIAH)

          * physClass - physical class (for example: J is jet)

          * prefix - A one or two character identifier prefix code (common values: G or GG Medevac, L Lifeguard, A Air Taxi, H Heavy, M Medium).

          * speed - ground speed, in kts.

          * status - Single letter code for current flight status, can be S Scheduled, F Filed, A Active, Z Completed, or X Cancelled.

          * updateType - data source of last position (P=projected, O=oceanic, Z=radar, A=ADS-B, M=multilateration, D=datalink, X=surface and near surface (ADS-B and ASDE-X), S=space-based).

          * waypoints - all of the intersections and VORs comprising the route
        style: form
        explode: true
        schema:
          type: string
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Id may be missing or may not be fa_flight_id format.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/{ident}/canonical:
    get:
      tags:
      - TripVair AI API/v1/flights
      summary: get_flights_canonical
      description: >
        When the ident parameter is a code that could map to multiple other codes,

        this endpoint returns an array of information about all the possible codes.

        An optional ident type and country code can be provided to refine ambiguous

        idents to a single result. The ident type should either be designator or

        registration to describe the ident being passed in. The country code should

        represent a country the operator of the flight operates within.
      operationId: get_flights_canonical
      parameters:
      - name: ident
        in: path
        description: The flight designator or aircraft registration
        required: true
        style: simple
        schema:
          type: string
          example: B6109
      - name: ident_type
        in: query
        description: Type of ident provided in the ident parameter
        style: form
        explode: true
        schema:
          type: string
      - name: country_code
        in: query
        description: An ISO 3166-1 alpha-2 country code.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). ident, ident_type, or country_code may be invalid.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/{id}/route:
    get:
      tags:
      - TripVair AI API/v1/flights
      summary: get_flight_route
      description: >
        Returns information about a flight's filed route including coordinates,

        names, and types of fixes along the route.  Not all flight routes can

        be successfully decoded by this endpoint, particularly if the flight is

        not entirely within the continental U.S. airspace, since this function

        only has access to navaids within that area. If data on a waypoint is

        missing then the type will be listed as "UNKNOWN".
      operationId: get_flight_route
      parameters:
      - name: id
        in: path
        description: The fa_flight_id to fetch
        required: true
        style: simple
        schema:
          type: string
          example: UAL1234-1234567890-airline-0123
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id may be missing or may not be fa_flight_id format.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '404':
          description: No route is available for this flight.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/search:
    get:
      tags:
      - TripVair AI API/v1/flights
      summary: get_flights_by_search
      description: >
        Search for airborne flights by matching against various parameters including

        geospatial data. Uses a simplified query syntax compared to

        /flights/search/advanced.
      operationId: get_flights_by_search
      parameters:
      - name: query
        in: query
        description: >-
          Query to search for flights with a simplified syntax (compared to

          /flights/search/advanced). Query syntax allows filtering by

          latitude/longitude box, aircraft ident with wildcards, type with

          wildcards, prefix, origin airport, destination airport, origin

          or destination airport, groundspeed, and altitude. It takes search

          terms in a single string comprising "-key value" pairs. Codeshares and

          alternate idents are NOT searched when using the -idents clause.


          Keys include:

          * `-prefix STRING`

          * `-type STRING`

          * `-idents STRING`

          * `-identOrReg STRING`

          * `-airline STRING`

          * `-destination STRING`

          * `-origin STRING`

          * `-originOrDestination STRING`

          * `-aboveAltitude INTEGER`

          * `-belowAltitude INTEGER`

          * `-aboveGroundspeed INTEGER`

          * `-belowGroundspeed INTEGER`

          * `-latlong "MINLAT MINLON MAXLAT MAXLON"`

          * `-filter {ga|airline}`
        style: form
        explode: true
        schema:
          type: string
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Query may be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/{id}/track:
    get:
      tags:
      - TripVair AI API/v1/flights
      summary: get_flight_track
      description: Returns the track for a flight as an array of positions.
      operationId: get_flight_track
      parameters:
      - name: id
        in: path
        description: The fa_flight_id to fetch
        required: true
        style: simple
        schema:
          type: string
          example: UAL1234-1234567890-airline-0123
      - name: include_estimated_positions
        in: query
        description: Whether to include estimated positions in the flight track
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Id may be missing or may not be fa_flight_id format. Aircraft may be blocked.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/search/positions:
    get:
      tags:
      - TripVair AI API/v1/flights
      summary: get_flights_by_position_search
      description: >
        Returns flight positions based on geospatial search parameters.  This

        allows you to locate flights that have ever flown within a specific a

        latitude/longitude box, groundspeed, and altitude. It takes search

        terms in a single string comprising of {operator key value} elements

        and returns an array of flight structures. Each search term must be

        enclosed in curly braces. Multiple search terms can be combined in an

        implicit boolean "and" by separating the terms with at least one space.

        This function only searches flight data representing approximately the

        last 24 hours.


        The supported operators include (note that operators take different numbers of arguments):


        * false - results must have the specified boolean key set to a value of false. Example: {false preferred}

        * true - results must have the specified boolean key set to a value of true. Example: {true preferred}

        * null - results must have the specified key set to a null value. Example: {null waypoints}

        * notnull - results must have the specified key not set to a null value. Example: {notnull aircraftType}

        * = - results must have a key that exactly matches the specified value. Example: {= fp C172}

        * != - results must have a key that must not match the specified value. Example: {!= prefix H}

        * < - results must have a key that is lexicographically less-than a specified value. Example: {< arrivalTime 1276811040}

        * \> - results must have a key that is lexicographically greater-than a specified value. Example: {> circles 5}

        * <= - results must have a key that is lexicographically less-than-or-equal-to a specified value. Example: {<= alt 8000}

        * \>= - results must have a key that is lexicographically greater-than-or-equal-to a specified value.

        * match - results must have a key that matches against a case-insensitive wildcard pattern. Example: {match ident AAL*}

        * notmatch - results must have a key that does not match against a case-insensitive wildcard pattern. Example: {notmatch aircraftType B76*}

        * range - results must have a key that is numerically between the two specified values. Example: {range alt 8000 20000}

        * in - results must have a key that exactly matches one of the specified values. Example: {in orig {KLAX KBUR KSNA KLGB}}


        The supported key names include (note that not all of these key names are returned in the result structure, and some have slightly different names):


        * alt - Altitude, measured in hundreds of feet or Flight Level.

        * altChange - a one-character code indicating the change in altitude.

        * cid - a three-character cid code

        * clock - UNIX epoch timestamp seconds since 1970

        * fp - unique identifier assigned by TripVair for this flight, aka fa_flight_id.

        * gs - ground speed, measured in kts.

        * lat - latitude of the reported position.

        * lon - longitude of the reported position

        * updateType - source of the last reported position (P=projected, O=oceanic, Z=radar, A=ADS-B, M=multilateration, D=datalink, X=surface and near surface (ADS-B and ASDE-X), S=space-based)
      operationId: get_flights_by_position_search
      parameters:
      - name: query
        in: query
        description: >-
          Query to search for flight positions. Search criteria is applied

          against all positions of a flight. This function only searches

          flights within approximately the last 24 hours. The supported

          operators include (note that operators take different numbers of

          arguments):


          * false - results must have the specified boolean key set to a value of false. Example: {false preferred}

          * true - results must have the specified boolean key set to a value of true. Example: {true preferred}

          * null - results must have the specified key set to a null value. Example: {null waypoints}

          * notnull - results must have the specified key not set to a null value. Example: {notnull aircraftType}

          * = - results must have a key that exactly matches the specified value. Example: {= fp C172}

          * != - results must have a key that must not match the specified value. Example: {!= prefix H}

          * < - results must have a key that is lexicographically less-than a specified value. Example: {< arrivalTime 1276811040}

          * \> - results must have a key that is lexicographically greater-than a specified value. Example: {> circles 5}

          * <= - results must have a key that is lexicographically less-than-or-equal-to a specified value. Example: {<= alt 8000}

          * \>= - results must have a key that is lexicographically greater-than-or-equal-to a specified value.

          * match - results must have a key that matches against a case-insensitive wildcard pattern. Example: {match ident AAL*}

          * notmatch - results must have a key that does not match against a case-insensitive wildcard pattern. Example: {notmatch aircraftType B76*}

          * range - results must have a key that is numerically between the two specified values. Example: {range alt 8000 20000}

          * in - results must have a key that exactly matches one of the specified values. Example: {in orig {KLAX KBUR KSNA KLGB}}


          The supported key names include (note that not all of these key names are returned in the result structure, and some have slightly different names):


          * alt - Altitude, measured in hundreds of feet or Flight Level.

          * altChange - a one-character code indicating the change in altitude.

          * altMax - Altitude, measured in hundreds of feet or Flight Level.

          * cid - a three-character cid code

          * cidfac - a four-character cidfac code

          * clock - UNIX epoch timestamp seconds since 1970

          * fp - unique identifier assigned by TripVair for this flight, aka fa_flight_id.

          * gs - ground speed, measured in kts.

          * lat - latitude of the reported position.

          * lon - longitude of the reported position

          * preferred - boolean indicator of position quality

          * recvd - UNIX epoch timestamp seconds since 1970

          * updateType - source of the last reported position (P=projected, O=oceanic, Z=radar, A=ADS-B, M=multilateration, D=datalink, X=surface and near surface (ADS-B and ASDE-X), S=space-based)
        style: form
        explode: true
        schema:
          type: string
      - name: unique_flights
        in: query
        description: Whether to return only a single position per unique fa_flight_id.
        style: form
        explode: true
        schema:
          type: string
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 'Incorrect parameter(s). Expected: pages > 0.'
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/search/count:
    get:
      tags:
      - TripVair AI API/v1/flights
      summary: get_flights_count_by_search
      description: >
        Full search query documentation is available at the /flights/search

        endpoint.
      operationId: get_flights_count_by_search
      parameters:
      - name: query
        in: query
        description: >-
          Query to search for flights with a simplified syntax (compared to

          /flights/search/advanced). Query syntax allows filtering by

          latitude/longitude box, aircraft ident with wildcards, type with

          wildcards, prefix, origin airport, destination airport, origin

          or destination airport, groundspeed, and altitude. It takes search

          terms in a single string comprising "-key value" pairs. Codeshares and

          alternate idents are NOT searched when using the -idents clause.


          Keys include:

          * `-prefix STRING`

          * `-type STRING`

          * `-idents STRING`

          * `-identOrReg STRING`

          * `-airline STRING`

          * `-destination STRING`

          * `-origin STRING`

          * `-originOrDestination STRING`

          * `-aboveAltitude INTEGER`

          * `-belowAltitude INTEGER`

          * `-aboveGroundspeed INTEGER`

          * `-belowGroundspeed INTEGER`

          * `-latlong "MINLAT MINLON MAXLAT MAXLON"`

          * `-filter {ga|airline}`
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/{ident}/intents:
    post:
      tags:
      - TripVair AI API/v1/flights
      summary: post_flights_by_ident
      description: >
        This operation informs TripVair of an upcoming (or recently

        departed) flight. This information is used solely by TripVair for

        improving the accuracy of flight tracking. This method does not

        transmit to any ANSP/ATC facility for flight separation or operational

        services. Access to this endpoint requires special account

        authorization. The TripVair account must also be subscribed to

        TripVair Global and the specified registration or ident must be on

        the Global account.
      operationId: post_flights_by_ident
      parameters:
      - name: ident
        in: path
        description: The ident or registration of the Flight Intent
        required: true
        style: simple
        schema:
          type: string
          example: RPA4854
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlightIntent'
        required: false
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Ident may be missing or pages may be < 1. Body may be incomplete. User may lack permissions to post flight intent for this ident. Arrival/departure times, duration, or aircraft type may be invalid.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /flights/{id}/map:
    get:
      tags:
      - TripVair AI API/v1/flights
      summary: get_flight_map
      description: >
        Returns a flight's track as a base64-encoded image. Image can contain a

        variety of additional data layers beyond just the track.
      operationId: get_flight_map
      parameters:
      - name: id
        in: path
        description: The fa_flight_id to fetch
        required: true
        style: simple
        schema:
          type: string
          example: UAL1234-1234567890-airline-0123
      - name: height
        in: query
        description: Height of requested image (pixels)
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: width
        in: query
        description: Width of requested image (pixels)
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: layer_on
        in: query
        description: List of map layers to enable
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: layer_off
        in: query
        description: List of map layers to disable
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: show_data_block
        in: query
        description: >-
          Whether a textual caption containing the ident, type, heading,

          altitude, origin, and destination should be displayed by the flight's

          position.
        style: form
        explode: true
        schema:
          type: string
      - name: airports_expand_view
        in: query
        description: >-
          Whether to force zoom area to ensure origin/destination airports are

          visible. Enabling this flag forcefully enables the show_airports flag

          as well.
        style: form
        explode: true
        schema:
          type: string
      - name: show_airports
        in: query
        description: >-
          Whether to show the origin/destination airports for the flight as

          labeled points on the map.
        style: form
        explode: true
        schema:
          type: string
      - name: bounding_box
        in: query
        description: >-
          Manually specify the zoom area of the map using custom bounds. Should

          be a list of 4 coordinates representing the top, right, bottom, and

          left sides of the area (in that order).
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id may be missing or may not be fa_flight_id format. Bounding box corners may be incorrectly defined.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /foresight/flights/search/advanced:
    get:
      tags:
      - TripVair AI API/v1/skymind
      summary: get_flights_by_advanced_search_with_foresight
      description: >
        Returns currently or recently airborne flights based on geospatial

        search parameters. If available, flights' predicted OOOI fields will be

        set.
      operationId: get_flights_by_advanced_search_with_foresight
      parameters:
      - name: query
        in: query
        description: >-
          Query to search for recent or airborne flights. Search criteria is only

          applied to the most recent position for a flight. This function only

          searches flights within approximately the last 24 hours. The supported

          operators include (note that operators take different numbers of

          arguments):


          * false - results must have the specified boolean key set to a value of false. Example: {false arrived}

          * true - results must have the specified boolean key set to a value of true. Example: {true lifeguard}

          * null - results must have the specified key set to a null value. Example: {null waypoints}

          * notnull - results must have the specified key not set to a null value. Example: {notnull aircraftType}

          * = - results must have a key that exactly matches the specified value. Example: {= aircraftType C172}

          * != - results must have a key that must not match the specified value. Example: {!= prefix H}

          * < - results must have a key that is lexicographically less-than a specified value. Example: {< arrivalTime 1276811040}

          * \> - results must have a key that is lexicographically greater-than a specified value. Example: {> circles 5}

          * <= - results must have a key that is lexicographically less-than-or-equal-to a specified value. Example: {<= alt 8000}

          * \>= - results must have a key that is lexicographically greater-than-or-equal-to a specified value.

          * match - results must have a key that matches against a case-insensitive wildcard pattern. Example: {match ident AAL*}

          * notmatch - results must have a key that does not match against a case-insensitive wildcard pattern. Example: {notmatch aircraftType B76*}

          * range - results must have a key that is numerically between the two specified values. Example: {range alt 8000 20000}

          * in - results must have a key that exactly matches one of the specified values. Example: {in orig {KLAX KBUR KSNA KLGB}}

          * orig_or_dest - results must have either the origin or destination key exactly match one of the specified values. Example: {orig_or_dest {KLAX KBUR KSNA KLGB}}

          * airline - results will only include airline flight if the argument is 1, or will only include GA flights if the argument is 0. Example: {airline 1}

          * aircraftType - results must have an aircraftType key that matches one of the specified case-insensitive wildcard patterns. Example: {aircraftType {B76* B77*}}

          * ident - results must have an ident key that matches one of the specified case-insensitive wildcard patterns. Example: {ident {N123* N456* AAL* UAL*}}

          * ident_or_reg - results must have an ident key or was known to be operated by an aircraft registration that matches one of the specified case-insensitive wildcard patterns. Example: {ident_or_reg {N123* N456* AAL* UAL*}}


          The supported key names include (note that not all of these key names are returned in the result structure, and some have slightly different names):


          * actualDepartureTime - Actual time of departure, or null if not departed yet. UNIX epoch timestamp seconds since 1970

          * aircraftType - aircraft type ID (for example: B763)

          * alt - altitude at last reported position (hundreds of feet or Flight Level)

          * altChange - altitude change indication (for example: "C" if climbing, "D" if descending, and empty if it is level)

          * arrivalTime - Actual time of arrival, or null if not arrived yet. UNIX epoch timestamp seconds since 1970

          * arrived - true if the flight has arrived at its destination.

          * cancelled - true if the flight has been cancelled. The meaning of cancellation is that the flight is no longer being tracked by TripVair. There are a number of reasons a flight may be cancelled including cancellation by the airline, but that will not always be the case.

          * cdt - Controlled Departure Time, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970

          * clock - Time of last received position. UNIX epoch timestamp seconds since 1970

          * cta - Controlled Time of Arrival, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970

          * dest - ICAO airport code of destination (for example: KLAX)

          * edt - Estimated Departure Time. Epoch timestamp seconds since 1970

          * eta - Estimated Time of Arrival. Epoch timestamp seconds since 1970

          * fdt - Field Departure Time. UNIX epoch timestamp seconds since 1970

          * firstPositionTime - Time when first reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970

          * fixes - intersections and/or VORs along the route (for example: SLS AMERO ARTOM VODIR NOTOS ULAPA ACA NUXCO OLULA PERAS ALIPO UPN GDL KEDMA BRISA CUL PERTI CEN PPE ALTAR ASUTA JLI RONLD LAADY WYVIL OLDEE RAL PDZ ARNES BASET WELLZ CIVET)

          * fp - unique identifier assigned by TripVair for this flight, aka fa_flight_id.

          * gs - ground speed at last reported position, in kts.

          * heading - direction of travel at last reported position.

          * hiLat - highest latitude travelled by flight.

          * hiLon - highest longitude travelled by flight.

          * ident - flight identifier or registration of aircraft.

          * lastPositionTime - Time when last reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970.

          * lat - latitude of last reported position.

          * lifeguard - true if a "lifeguard" rescue flight.

          * lon - longitude of last reported position.

          * lowLat - lowest latitude travelled by flight.

          * lowLon - lowest longitude travelled by flight.

          * ogta - Original Time of Arrival. UNIX epoch timestamp seconds since 1970

          * ogtd - Original Time of Departure. UNIX epoch timestamp seconds since 1970

          * orig - ICAO airport code of origin (for example: KIAH)

          * physClass - physical class (for example: J is jet)

          * prefix - A one or two character identifier prefix code (common values: G or GG Medevac, L Lifeguard, A Air Taxi, H Heavy, M Medium).

          * speed - ground speed, in kts.

          * status - Single letter code for current flight status, can be S Scheduled, F Filed, A Active, Z Completed, or X Cancelled.

          * updateType - data source of last position (P=projected, O=oceanic, Z=radar, A=ADS-B, M=multilateration, D=datalink, X=surface and near surface (ADS-B and ASDE-X), S=space-based).

          * waypoints - all of the intersections and VORs comprising the route
        style: form
        explode: true
        schema:
          type: string
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Query may be incorrect.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /foresight/flights/{ident}:
    get:
      tags:
      - TripVair AI API/v1/skymind
      summary: get_flight_with_foresight
      description: >
        Returns the flight info status summary for a registration, ident, or

        fa_flight_id, including all available predicted fields.  If a

        fa_flight_id is specified then a maximum of 1 flight is returned,

        unless the flight has been diverted in which case both the original

        flight and any diversions will be returned with a duplicate fa_flight_id.
      operationId: get_flight_with_foresight
      parameters:
      - name: ident
        in: path
        description: The ident, registration, or fa_flight_id to fetch
        required: true
        style: simple
        schema:
          type: string
          example: UAL4
      - name: ident_type
        in: query
        description: >-
          Type of ident provided in the ident parameter. By default, the passed

          ident is interpreted as a registration if possible. This parameter can

          force the ident to be interpreted as a designator instead.
        style: form
        explode: true
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results, comparing against flights'

          `scheduled_out` field (or `scheduled_off` if `scheduled_out` is

          missing). The format is ISO8601 date or datetime, and the bound is

          inclusive. Specified start date must be no further than 10 days in the

          past and 2 days in the future. If not specified, will default to

          departures starting approximately 11 days in the past. If using date

          instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results, comparing against flights'

          `scheduled_out` field (or `scheduled_off` if `scheduled_out` is

          missing). The format is ISO8601 date or datetime, and the bound is

          exclusive. Specified end date must be no further than 10 days in the

          past and 2 days in the future. If not specified, will default to

          departures starting approximately 2 days in the future. If using date

          instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter(s). Ident may be missing or not in fa_flight_id format or pages may be < 1.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /foresight/flights/{id}/position:
    get:
      tags:
      - TripVair AI API/v1/skymind
      summary: get_flight_position_with_foresight
      description: Returns the latest position for a flight
      operationId: get_flight_position_with_foresight
      parameters:
      - name: id
        in: path
        description: The fa_flight_id to fetch
        required: true
        style: simple
        schema:
          type: string
          example: UAL1234-1234567890-airline-0123
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id may be missing or may not be fa_flight_id format. Query may be incorrect.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /operators:
    get:
      tags:
      - TripVair AI API/v1/ops
      summary: get_all_operators
      description: >
        Returns list of operator references (ICAO/IATA codes and URLs to access

        more information).
      operationId: get_all_operators
      parameters:
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: List of operators.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /operators/{id}:
    get:
      tags:
      - TripVair AI API/v1/ops
      summary: get_operator
      description: >
        Returns information for an operator such as their name, ICAO/IATA

        codes, headquarter location, etc.
      operationId: get_operator
      parameters:
      - name: id
        in: path
        description: >-
          The ICAO or IATA identifier for an operator. The use of ICAO code is

          strongly preferred. In the case of non-unique IATA codes the operator

          with the lexicographically first ICAO code will be returned.
        required: true
        style: simple
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid operator code and cannot be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '404':
          description: No such operator exists.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /operators/{id}/canonical:
    get:
      tags:
      - TripVair AI API/v1/ops
      summary: get_operators_canonical
      description: >
        Returns all possible matches for a given operator code (ICAO or IATA).

        An optional country code can be provided to refine ambiguous IATA codes

        to a single result. The country code should represent a country the

        operator operates within.
      operationId: get_operators_canonical
      parameters:
      - name: id
        in: path
        description: >-
          The ICAO or IATA identifier for an operator. The use of ICAO code is

          strongly preferred. In the case of non-unique IATA codes the operator

          with the lexicographically first ICAO code will be returned.
        required: true
        style: simple
        schema:
          type: string
      - name: country_code
        in: query
        description: An ISO 3166-1 alpha-2 country code.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >-
            Incorrect parameter (id or country_code). Id must be a valid operator code and cannot be empty.

            Country code must represent a country the operator operates within.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '404':
          description: No such operator exists.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /operators/{id}/flights:
    get:
      tags:
      - TripVair AI API/v1/ops
      summary: get_operator_flights
      description: >
        Returns all recent and upcoming flights for this operator. Behaviour for

        optional start and end dates for each type returned (`scheduled`, `arrivals`,

        `enroute`) match the behaviour in their corresponding endpoints.
      operationId: get_operator_flights
      parameters:
      - name: id
        in: path
        description: >-
          The ICAO or IATA identifier for an operator. The use of ICAO code is

          strongly preferred. In the case of non-unique IATA codes the operator

          with the lexicographically first ICAO code will be returned.
        required: true
        style: simple
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results. The format is ISO8601 date

          or datetime, and the bound is inclusive. Specified start date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results. The format is ISO8601 date or

          datetime, and the bound is exclusive. Specified end date must be no

          further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: Operator's flights.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid operator code and cannot be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '404':
          description: No such operator exists.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /operators/{id}/flights/scheduled:
    get:
      tags:
      - TripVair AI API/v1/ops
      summary: get_operator_flights_scheduled
      description: >
        Returns flights for this operator that are scheduled to depart or have

        recently been cancelled, ordered by `estimated_off` (or `scheduled_off`

        if `estimated_off` is missing) ascending. The optional start and end

        parameters will be compared against `scheduled_off` to limit the

        flights returned. If start is not specified, flights with a

        `scheduled_off` or cancellation time no further than two hours into the

        past will be returned. If end is not specified, there is no guaranteed

        bound for how far in the future scheduled flights will be returned (it

        will typically be around 48 hours in the future for commercial flights,

        though).
      operationId: get_operator_flights_scheduled
      parameters:
      - name: id
        in: path
        description: >-
          The ICAO or IATA identifier for an operator. The use of ICAO code is

          strongly preferred. In the case of non-unique IATA codes the operator

          with the lexicographically first ICAO code will be returned.
        required: true
        style: simple
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results. The format is ISO8601 date

          or datetime, and the bound is inclusive. Specified start date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results. The format is ISO8601 date or

          datetime, and the bound is exclusive. Specified end date must be no

          further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid operator code and cannot be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '404':
          description: No such operator exists.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /operators/{id}/flights/arrivals:
    get:
      tags:
      - TripVair AI API/v1/ops
      summary: get_operator_flights_arrived
      description: >
        Returns flights for this operator that have departed and subsequently

        arrived, ordered by `actual_on` descending. The optional start and end

        parameters will be compared against `actual_on` to limit the flights

        returned. The start parameter's default value is 24 hours before the

        current time. The end parameter's default value is the current time.
      operationId: get_operator_flights_arrived
      parameters:
      - name: id
        in: path
        description: >-
          The ICAO or IATA identifier for an operator. The use of ICAO code is

          strongly preferred. In the case of non-unique IATA codes the operator

          with the lexicographically first ICAO code will be returned.
        required: true
        style: simple
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results. The format is ISO8601 date

          or datetime, and the bound is inclusive. Specified start date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results. The format is ISO8601 date or

          datetime, and the bound is exclusive. Specified end date must be no

          further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: Arrived flights.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid operator code and cannot be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '404':
          description: No such operator exists.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /operators/{id}/flights/counts:
    get:
      tags:
      - TripVair AI API/v1/ops
      summary: get_operator_flights_count
      description: >
        Returns counts of both airborne and recently operated flights for

        operator.
      operationId: get_operator_flights_count
      parameters:
      - name: id
        in: path
        description: >-
          The ICAO or IATA identifier for an operator. The use of ICAO code is

          strongly preferred. In the case of non-unique IATA codes the operator

          with the lexicographically first ICAO code will be returned.
        required: true
        style: simple
        schema:
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid operator code and cannot be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '404':
          description: No such operator exists.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /operators/{id}/flights/enroute:
    get:
      tags:
      - TripVair AI API/v1/ops
      summary: get_operator_flights_enroute
      description: >
        Returns flights for this operator that have departed and are currently

        en route, ordered by `estimated_on` ascending. The optional start and

        end parameters will be compared against `estimated_on` to limit the

        flights returned. The start parameter's default value is 48 hours

        before the current time (this accounts for delayed flights). There is

        no default end bound.
      operationId: get_operator_flights_enroute
      parameters:
      - name: id
        in: path
        description: >-
          The ICAO or IATA identifier for an operator. The use of ICAO code is

          strongly preferred. In the case of non-unique IATA codes the operator

          with the lexicographically first ICAO code will be returned.
        required: true
        style: simple
        schema:
          type: string
      - name: start
        in: query
        description: >-
          The starting date range for flight results. The format is ISO8601 date

          or datetime, and the bound is inclusive. Specified start date must be

          no further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: end
        in: query
        description: >-
          The ending date range for flight results. The format is ISO8601 date or

          datetime, and the bound is exclusive. Specified end date must be no

          further than 10 days in the past and 2 days in the future. If using

          date instead of datetime, the time will default to 00:00:00Z.
        style: form
        explode: true
        schema:
          type: string
          example: '"2021-12-31T19:59:59.000Z"'
      - name: max_pages
        in: query
        description: Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: Opaque value used to get the next batch of data from a paged collection.
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: En route flights.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect parameter (id). Id must be a valid operator code and cannot be empty.
          headers: {}
          content:
            application/json:
              schema:
                type: object
        '404':
          description: No such operator exists.
          headers: {}
          content:
            application/json:
              schema:
                type: object
      deprecated: false
components:
  schemas:
    FlightIntent:
      title: FlightIntent
      required:
      - aircraft_type
      - origin
      - destination
      - intended_off
      - intended_on
      type: object
      properties:
        aircraft_type:
          type: string
          description: Aircraft type ICAO code.
        origin:
          type: string
          description: Origin airport ICAO code or LID.
        destination:
          type: string
          description: Destination airport ICAO code or LID.
        intended_off:
          type: string
          description: >-
            Intended runway departure time of flight. This must be within 2 hours of

            the actual departure time or the flight intent will be ignored. Time may

            not be more than 1 hour in the past or 48 hours in the future.
          format: date-time
        intended_on:
          type: string
          description: Intended runway arrival time of flight.
          format: date-time
        altitude:
          type: integer
          description: Cruising altitude (feet).
          format: int32
        airspeed:
          type: integer
          description: Cruising airspeed (knots).
          format: int32
        route:
          type: string
          description: Flight route as a series of space-separate waypoints.
tags:
- name: TripVair AI API
- name: TripVair AI API/v1/airports
- name: TripVair AI API/v1/flights
- name: TripVair AI API/v1/skymind
- name: TripVair AI API/v1/ops
