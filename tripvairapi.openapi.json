{
  "openapi": "3.0.1",
  "info": {
    "title": "TripVair AI API",
    "description": "",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "TripVair AI API"
    },
    {
      "name": "TripVair AI API/v1/airports"
    },
    {
      "name": "TripVair AI API/v1/flights"
    },
    {
      "name": "TripVair AI API/v1/skymind"
    },
    {
      "name": "TripVair AI API/v1/ops"
    }
  ],
  "paths": {
    "/airports": {
      "get": {
        "summary": "Get all airports",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns the ICAO identifiers of all known airports. For airports that\ndo not have an ICAO identifier, the FAA LID identifier will be used.\nLinks for further information about each airport are included.\n",
        "operationId": "get_all_airports",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of airports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658790-run"
      }
    },
    "/airports/{id}": {
      "get": {
        "summary": "Get static information about an airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns information about an airport given an ICAO or LID airport code\nsuch as KLAX, KIAH, O07, etc. Data returned includes airport name,\ncity, state (when known), latitude, longitude, and timezone.\n",
        "operationId": "get_airport",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the requested airport.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid airport code and cannot be empty.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658791-run"
      }
    },
    "/airports/{id}/canonical": {
      "get": {
        "summary": "Get the canonical code of an airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns a list of ICAO airport codes corresponding to the given IATA or LID airport code.\nIATA codes can be identical to some LID codes, so if id_type is specified, only 1 ICAO\ncode will be returned. If no id_type is specified and there are two possible ICAO codes,\nboth will be returned.\n",
        "operationId": "get_airports_canonical",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id_type",
            "in": "query",
            "description": "Type of airport code provided in the id parameter\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Id must be a valid airport code and id_type must be 'icao', 'iata', or 'lid'.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658792-run"
      }
    },
    "/airports/{id}/nearby": {
      "get": {
        "summary": "Get airports near an airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns a list of airports located within a given distance from the\nspecified airport.\n",
        "operationId": "get_airports_near_airport",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "The search radius to use for finding nearby airports (statue miles)\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "only_iap",
            "in": "query",
            "description": "Return only nearby airports with Instrument Approaches (also limits\nresults to North American airports)\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Id must be a valid airport code and cannot be empty, radius > 0.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658793-run"
      }
    },
    "/airports/nearby": {
      "get": {
        "summary": "Get airports near a location",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns a list of airports located within a given distance from the\ngiven location.\n",
        "operationId": "get_nearby_airports",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "latitude",
            "in": "query",
            "description": "The latitude of the point used to search for nearby airports\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "The longitude of the point used to search for nearby airports\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "The search radius to use for finding nearby airports (statue miles)\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "only_iap",
            "in": "query",
            "description": "Return only nearby airports with Instrument Approaches (also limits\nresults to North American airports)\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Expected: numerical latitude and longitude, radius > 0.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658794-run"
      }
    },
    "/airports/{id}/delays": {
      "get": {
        "summary": "Get airport delay information",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns a list of reason codes for delays at a specific airport. There\nmay be multiple reasons returned if there are multiple types of delays\nreported at an airport. Note that individual flights may be delayed\nwithout there being an airport delay returned by this endpoint.\n",
        "operationId": "get_airport_delays",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid airport code and cannot be empty.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658795-run"
      }
    },
    "/airports/{id}/flights": {
      "get": {
        "summary": "Get all flights for a given airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns all recent and upcoming flights departing from or arriving at\nthe specified airport. Filtering/ordering behavior for the optional\nstart and end parameters for each type (`scheduled_departures`,\n`scheduled_arrivals`, `departures`, `arrivals`) match the behavior in\ntheir corresponding endpoints.\n",
        "operationId": "get_airport_flights",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "airline",
            "in": "query",
            "description": "Airline to filter flights by. Do not provide airline if type is provided.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of flights to return. Do not provide type if airline is provided.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results. The format is ISO8601 date\nor datetime, and the bound is inclusive. Specified start date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results. The format is ISO8601 date\nor datetime, and the bound is exclusive. Specified end date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid airport code and cannot be empty. Airline and type query params cannot both be set.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658796-run"
      }
    },
    "/airports/{id}/flights/departures": {
      "get": {
        "summary": "Get flights that have recently departed from an airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns flights that have departed from an airport and not been\ndiverted, ordered by `actual_off` descending. The optional start and\nend parameters will be compared against `actual_off` to limit the\nflights returned. The start parameter's default value is 24 hours\nbefore the current time. The end parameter's default value is the\ncurrent time.\n",
        "operationId": "get_airport_flights_departed",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "airline",
            "in": "query",
            "description": "Airline to filter flights by. Do not provide airline if type is provided.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of flights to return. Do not provide type if airline is provided.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results. The format is ISO8601 date\nor datetime, and the bound is inclusive. Specified start date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results. The format is ISO8601 date\nor datetime, and the bound is exclusive. Specified end date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Id must be a valid airport code and cannot be empty. Airline and type query params cannot both be set.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658797-run"
      }
    },
    "/airports/{id}/flights/arrivals": {
      "get": {
        "summary": "Get flights that have recently arrived at an airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns flights that have arrived at an airport, orderd by\n`actual_on` descending. The start parameter's default value is 24 hours\nbefore the current time. The end parameter's default value is the\ncurrent time.\n",
        "operationId": "get_airport_flights_arrived",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "airline",
            "in": "query",
            "description": "Airline to filter flights by. Do not provide airline if type is provided.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of flights to return. Do not provide type if airline is provided.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results. The format is ISO8601 date\nor datetime, and the bound is inclusive. Specified start date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results. The format is ISO8601 date\nor datetime, and the bound is exclusive. Specified end date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Id must be a valid airport code and cannot be empty. Airline and type query params cannot both be set.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658798-run"
      }
    },
    "/airports/{id}/flights/scheduled_arrivals": {
      "get": {
        "summary": "Get future flights arriving at an airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns flights that are expected to arrive at an airport. This can\ninclude both undeparted and en route flights. Flights are ordered by\n`estimated_on` ascending. The optional start and end parameters will\nbe compared against `estimated_on` to limit the flights returned. The\nstart parameter's default value is 48 hours before the current time\n(this accounts for delayed flights). The end parameter's default value\nis 24 hours after the current time.\n",
        "operationId": "get_airport_flights_scheduled_arrivals",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "airline",
            "in": "query",
            "description": "Airline to filter flights by. Do not provide airline if type is provided.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of flights to return. Do not provide type if airline is provided.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results. The format is ISO8601 date\nor datetime, and the bound is inclusive. Specified start date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results. The format is ISO8601 date\nor datetime, and the bound is exclusive. Specified end date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Id must be a valid airport code and cannot be empty. Airline and type query params cannot both be set.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658799-run"
      }
    },
    "/airports/{id}/flights/to/{dest_id}": {
      "get": {
        "summary": "Get flights with a specific origin and destination",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "This endpoint is quite similar to the `FindFlight` operator in prior\nversions of AeroAPI. Results may include both non-stop and one-stop\nflights. Note that because the returned flights can include multiple\nlegs, the response format differs from most other flight-returning\nendpoints. If the optional start or end query parameters are not\nprovided start will default to 1 day in the future, while end will\ndefault to 7 days in the past relative to the time the query is made.\n",
        "operationId": "get_flights_between_airports",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dest_id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of flights to return.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connection",
            "in": "query",
            "description": "Whether flights should be filtered based on their connection status.\nLeaving this blank will result in a mix of flights being returned, with\na preference for nonstop flights. One-stop flights are identified with\na custom heuristic.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results. The format is ISO8601 date\nor datetime, and the bound is inclusive. Specified start date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results. The format is ISO8601 date\nor datetime, and the bound is exclusive. Specified end date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Id and dest_id must be valid airport codes and cannot be empty.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658800-run"
      }
    },
    "/airports/delays": {
      "get": {
        "summary": "Get delay information for all airports with delays",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns a list of airports with delays. There may be multiple reasons\nreturned per airport if there are multiple types of delays reported at\nan airport. Note that individual flights can be delayed without there\nbeing an airport-wide delay returned by this endpoint.\n",
        "operationId": "get_delays_for_all_airports",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658801-run"
      }
    },
    "/airports/{id}/flights/scheduled_departures": {
      "get": {
        "summary": "Get future flights departing from an airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns flights that are scheduled to depart from an airport or have\nrecently been cancelled, ordered by `estimated_off` (or `scheduled_off`\nif `estimated_off` is missing) ascending. The optional start and end\nparameters will be compared against `scheduled_off` to limit the\nflights returned. The start parameter's default value is 2 hours before\nthe current time. The end parameter's default value is 24 hours after\nthe current time.\n",
        "operationId": "get_airport_flights_scheduled_departures",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "airline",
            "in": "query",
            "description": "Airline to filter flights by. Do not provide airline if type is provided.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of flights to return. Do not provide type if airline is provided.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results. The format is ISO8601 date\nor datetime, and the bound is inclusive. Specified start date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results. The format is ISO8601 date\nor datetime, and the bound is exclusive. Specified end date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Id must be a valid airport code and cannot be empty. Airline and type query params cannot both be set.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658802-run"
      }
    },
    "/airports/{id}/weather/observations": {
      "get": {
        "summary": "Get weather conditions for given airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns weather for an airport in the form of a decoded METAR, starting\nfrom the latest report and working backwards in time as more data is\nrequested. Data is provided in parsed, human-readable, and raw\nformats.\n",
        "operationId": "get_airport_weather_observations",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "temperature_units",
            "in": "query",
            "description": "Units to use for temperature fields.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "return_nearby_weather",
            "in": "query",
            "description": "If the requested airport does not have a weather conditions report then\nthe weather for the nearest airport within 30 miles will be returned\ninstead.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Timestamp from which to begin returning weather data in a 1 day range.\nBecause weather data is returned in reverse chronological order, all\nreturned weather reports will be from before this timestamp. If unspecified,\nweather is returned starting from now up to or less than the user history limit,\nnormally 14 days.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid airport code and cannot be empty. Temperature_units may be invalid. Timestamp may be before user's history limit.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658803-run"
      }
    },
    "/flights/{id}/position": {
      "get": {
        "summary": "Get flight's current position",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns the latest position for a flight",
        "operationId": "get_flight_position",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The fa_flight_id to fetch",
            "required": true,
            "example": "UAL1234-1234567890-airline-0123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id may be missing or may not be fa_flight_id format.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658804-run"
      }
    },
    "/flights/{ident}": {
      "get": {
        "summary": "Get information for a flight",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns the flight info status summary for a registration, ident, or\nfa_flight_id.  If a fa_flight_id is specified then a maximum of 1\nflight is returned, unless the flight has been diverted in which case\nboth the original flight and any diversions will be returned with a\nduplicate fa_flight_id. If a registration or ident is specified,\napproximately 14 days of recent and scheduled flight information is\nreturned, ordered by `scheduled_out` (or `scheduled_off` if\n`scheduled_out` is missing) descending. Alternately, specify a start\nand end parameter to find your flight(s) of interest, including up to\n10 days of flight history.\n",
        "operationId": "get_flight",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "ident",
            "in": "path",
            "description": "The ident, registration, or fa_flight_id to fetch",
            "required": true,
            "example": "UAL4",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ident_type",
            "in": "query",
            "description": "Type of ident provided in the ident parameter. By default, the passed\nident is interpreted as a registration if possible. This parameter can\nforce the ident to be interpreted as a designator instead.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results, comparing against flights'\n`scheduled_out` field (or `scheduled_off` if `scheduled_out` is\nmissing). The format is ISO8601 date or datetime, and the bound is\ninclusive. Specified start date must be no further than 10 days in the\npast and 2 days in the future. If not specified, will default to\ndepartures starting approximately 11 days in the past. If using date\ninstead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results, comparing against flights'\n`scheduled_out` field (or `scheduled_off` if `scheduled_out` is\nmissing). The format is ISO8601 date or datetime, and the bound is\nexclusive. Specified end date must be no further than 10 days in the\npast and 2 days in the future. If not specified, will default to\ndepartures starting approximately 2 days in the future. If using date\ninstead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Ident may be missing or not in fa_flight_id format or pages may be < 1.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658805-run"
      }
    },
    "/airports/{id}/flights/counts": {
      "get": {
        "summary": "Get flight counts for an airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns counts of flights for an airport broken down by flight status.\nThe returned categories are subtly different from what is returned from\nthe `/airports/{id}/flights` endpoints. Specifically, this operation\ndoes not include completed flights in its counts, and it does not count\ncancelled/diverted flights. It also does not strictly bound the time\nfor which scheduled flights are counted, so all future flights that\nTripVair knows about are included in the counts. See the response\nschema and documentation for the airport flights endpoints for more\ninformation.\n",
        "operationId": "get_airport_flights_count",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid airport code and cannot be empty.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658806-run"
      }
    },
    "/airports/{id}/weather/forecast": {
      "get": {
        "summary": "Get weather forecast for given airport",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns the weather forecast for an airport in the form of a decoded TAF\n(Terminal Area Forecast). Only a single result is returned.\n",
        "operationId": "get_airport_weather_forecast",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Timestamp from which to begin returning weather data in a 1 day range.\nBecause weather data is returned in reverse chronological order, all\nreturned weather reports will be from before this timestamp. If unspecified,\nweather is returned starting from now up to or less than the user history limit,\nnormally 14 days.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "return_nearby_weather",
            "in": "query",
            "description": "If the requested airport does not have a weather conditions report then\nthe weather for the nearest airport within 30 miles will be returned\ninstead.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid airport code and cannot be empty. Temperature_units may be invalid. Timestamp may be before user's history limit.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "404": {
            "description": "No upcoming forecast currently available for this airport.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658807-run"
      }
    },
    "/airports/{id}/routes/{dest_id}": {
      "get": {
        "summary": "Get routes between 2 airports",
        "x-apidog-folder": "TripVair AI API/v1/airports",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns information about assigned IFR routings between two airports.\n",
        "operationId": "get_routes_between_airports",
        "tags": [
          "TripVair AI API/v1/airports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dest_id",
            "in": "path",
            "description": "ICAO, IATA or LID ID of destination airport to fetch. [ICAO is highly preferred](/aeroapi/portal/resources#icaoCode) to prevent ambiguity.\n",
            "required": true,
            "example": "KIAH",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Field to sort results by. \"count\" will sort results by the route\nfiling count (descending). \"last_departure_time\" will sort results by\nthe latest scheduled departure time for that route (descending).\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_file_age",
            "in": "query",
            "description": "Maximum filed plan age of flights to consider. Can be a value less\nthan or equal to 14 days (2 weeks) OR 1 month OR 1 year.\n",
            "required": false,
            "example": "6 days",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Id and dest_id must be valid airport codes and cannot be empty. Max_file_age must be one of the specified values.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658808-run"
      }
    },
    "/flights/search/advanced": {
      "get": {
        "summary": "Search for flights using advanced syntax",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns currently or recently airborne flights based on geospatial\nsearch parameters.\n\nQuery parameters include a latitude/longitude box, aircraft ident with\nwildcards, type with wildcards, prefix, origin airport,\ndestination airport, origin or destination airport, groundspeed, and\naltitude. It takes search terms in a single string comprising of\n{operator key value} elements and returns an array of flight\nstructures. Each search term must be enclosed in curly braces. Multiple\nsearch terms can be combined in an implicit boolean \"and\" by separating\nthe terms with at least one space. This function only searches flight\ndata representing approximately the last 24 hours. Codeshares and\nalternate idents are NOT searched when matching against the ident key.\n\nThe supported operators include (note that operators take different numbers of arguments):\n\n* false - results must have the specified boolean key set to a value of false. Example: {false arrived}\n* true - results must have the specified boolean key set to a value of true. Example: {true lifeguard}\n* null - results must have the specified key set to a null value. Example: {null waypoints}\n* notnull - results must have the specified key not set to a null value. Example: {notnull aircraftType}\n* = - results must have a key that exactly matches the specified value. Example: {= aircraftType C172}\n* != - results must have a key that must not match the specified value. Example: {!= prefix H}\n* < - results must have a key that is lexicographically less-than a specified value. Example: {< arrivalTime 1276811040}\n* \\> - results must have a key that is lexicographically greater-than a specified value. Example: {> circles 5}\n* <= - results must have a key that is lexicographically less-than-or-equal-to a specified value. Example: {<= alt 8000}\n* \\>= - results must have a key that is lexicographically greater-than-or-equal-to a specified value.\n* match - results must have a key that matches against a case-insensitive wildcard pattern. Example: {match ident AAL*}\n* notmatch - results must have a key that does not match against a case-insensitive wildcard pattern. Example: {notmatch aircraftType B76*}\n* range - results must have a key that is numerically between the two specified values. Example: {range alt 8000 20000}\n* in - results must have a key that exactly matches one of the specified values. Example: {in orig {KLAX KBUR KSNA KLGB}}\n* orig_or_dest - results must have either the origin or destination key exactly match one of the specified values. Example: {orig_or_dest {KLAX KBUR KSNA KLGB}}\n* airline - results will only include airline flight if the argument is 1, or will only include GA flights if the argument is 0. Example: {airline 1}\n* aircraftType - results must have an aircraftType key that matches one of the specified case-insensitive wildcard patterns. Example: {aircraftType {B76* B77*}}\n* ident - results must have an ident key that matches one of the specified case-insensitive wildcard patterns. Example: {ident {N123* N456* AAL* UAL*}}\n* ident_or_reg - results must have an ident key or was known to be operated by an aircraft registration that matches one of the specified case-insensitive wildcard patterns. Example: {ident_or_reg {N123* N456* AAL* UAL*}}\n\nThe supported key names include (note that not all of these key names are returned in the result structure, and some have slightly different names):\n\n* actualDepartureTime - Actual time of departure, or null if not departed yet. UNIX epoch timestamp seconds since 1970\n* aircraftType - aircraft type ID (for example: B763)\n* alt - altitude at last reported position (hundreds of feet or Flight Level)\n* altChange - altitude change indication (for example: \"C\" if climbing, \"D\" if descending, and empty if it is level)\n* arrivalTime - Actual time of arrival, or null if not arrived yet. UNIX epoch timestamp seconds since 1970\n* arrived - true if the flight has arrived at its destination.\n* cancelled - true if the flight has been cancelled. The meaning of cancellation is that the flight is no longer being tracked by TripVair. There are a number of reasons a flight may be cancelled including cancellation by the airline, but that will not always be the case.\n* cdt - Controlled Departure Time, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970\n* clock - Time of last received position. UNIX epoch timestamp seconds since 1970\n* cta - Controlled Time of Arrival, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970\n* dest - ICAO airport code of destination (for example: KLAX)\n* edt - Estimated Departure Time. Epoch timestamp seconds since 1970\n* eta - Estimated Time of Arrival. Epoch timestamp seconds since 1970\n* fdt - Field Departure Time. UNIX epoch timestamp seconds since 1970\n* firstPositionTime - Time when first reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970\n* fixes - intersections and/or VORs along the route (for example: SLS AMERO ARTOM VODIR NOTOS ULAPA ACA NUXCO OLULA PERAS ALIPO UPN GDL KEDMA BRISA CUL PERTI CEN PPE ALTAR ASUTA JLI RONLD LAADY WYVIL OLDEE RAL PDZ ARNES BASET WELLZ CIVET)\n* fp - unique identifier assigned by TripVair for this flight, aka fa_flight_id.\n* gs - ground speed at last reported position, in kts.\n* heading - direction of travel at last reported position.\n* hiLat - highest latitude travelled by flight.\n* hiLon - highest longitude travelled by flight.\n* ident - flight identifier or registration of aircraft.\n* lastPositionTime - Time when last reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970.\n* lat - latitude of last reported position.\n* lifeguard - true if a \"lifeguard\" rescue flight.\n* lon - longitude of last reported position.\n* lowLat - lowest latitude travelled by flight.\n* lowLon - lowest longitude travelled by flight.\n* ogta - Original Time of Arrival. UNIX epoch timestamp seconds since 1970\n* ogtd - Original Time of Departure. UNIX epoch timestamp seconds since 1970\n* orig - ICAO airport code of origin (for example: KIAH)\n* physClass - physical class (for example: J is jet)\n* prefix - A one or two character identifier prefix code (common values: G or GG Medevac, L Lifeguard, A Air Taxi, H Heavy, M Medium).\n* speed - ground speed, in kts.\n* status - Single letter code for current flight status, can be S Scheduled, F Filed, A Active, Z Completed, or X Cancelled.\n* updateType - data source of last position (P=projected, O=oceanic, Z=radar, A=ADS-B, M=multilateration, D=datalink, X=surface and near surface (ADS-B and ASDE-X), S=space-based).\n* waypoints - all of the intersections and VORs comprising the route\n",
        "operationId": "get_flights_by_advanced_search",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query to search for recent or airborne flights. Search criteria is only\napplied to the most recent position for a flight. This function only\nsearches flights within approximately the last 24 hours. The supported\noperators include (note that operators take different numbers of\narguments):\n\n* false - results must have the specified boolean key set to a value of false. Example: {false arrived}\n* true - results must have the specified boolean key set to a value of true. Example: {true lifeguard}\n* null - results must have the specified key set to a null value. Example: {null waypoints}\n* notnull - results must have the specified key not set to a null value. Example: {notnull aircraftType}\n* = - results must have a key that exactly matches the specified value. Example: {= aircraftType C172}\n* != - results must have a key that must not match the specified value. Example: {!= prefix H}\n* < - results must have a key that is lexicographically less-than a specified value. Example: {< arrivalTime 1276811040}\n* \\> - results must have a key that is lexicographically greater-than a specified value. Example: {> circles 5}\n* <= - results must have a key that is lexicographically less-than-or-equal-to a specified value. Example: {<= alt 8000}\n* \\>= - results must have a key that is lexicographically greater-than-or-equal-to a specified value.\n* match - results must have a key that matches against a case-insensitive wildcard pattern. Example: {match ident AAL*}\n* notmatch - results must have a key that does not match against a case-insensitive wildcard pattern. Example: {notmatch aircraftType B76*}\n* range - results must have a key that is numerically between the two specified values. Example: {range alt 8000 20000}\n* in - results must have a key that exactly matches one of the specified values. Example: {in orig {KLAX KBUR KSNA KLGB}}\n* orig_or_dest - results must have either the origin or destination key exactly match one of the specified values. Example: {orig_or_dest {KLAX KBUR KSNA KLGB}}\n* airline - results will only include airline flight if the argument is 1, or will only include GA flights if the argument is 0. Example: {airline 1}\n* aircraftType - results must have an aircraftType key that matches one of the specified case-insensitive wildcard patterns. Example: {aircraftType {B76* B77*}}\n* ident - results must have an ident key that matches one of the specified case-insensitive wildcard patterns. Example: {ident {N123* N456* AAL* UAL*}}\n* ident_or_reg - results must have an ident key or was known to be operated by an aircraft registration that matches one of the specified case-insensitive wildcard patterns. Example: {ident_or_reg {N123* N456* AAL* UAL*}}\n\nThe supported key names include (note that not all of these key names are returned in the result structure, and some have slightly different names):\n\n* actualDepartureTime - Actual time of departure, or null if not departed yet. UNIX epoch timestamp seconds since 1970\n* aircraftType - aircraft type ID (for example: B763)\n* alt - altitude at last reported position (hundreds of feet or Flight Level)\n* altChange - altitude change indication (for example: \"C\" if climbing, \"D\" if descending, and empty if it is level)\n* arrivalTime - Actual time of arrival, or null if not arrived yet. UNIX epoch timestamp seconds since 1970\n* arrived - true if the flight has arrived at its destination.\n* cancelled - true if the flight has been cancelled. The meaning of cancellation is that the flight is no longer being tracked by TripVair. There are a number of reasons a flight may be cancelled including cancellation by the airline, but that will not always be the case.\n* cdt - Controlled Departure Time, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970\n* clock - Time of last received position. UNIX epoch timestamp seconds since 1970\n* cta - Controlled Time of Arrival, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970\n* dest - ICAO airport code of destination (for example: KLAX)\n* edt - Estimated Departure Time. Epoch timestamp seconds since 1970\n* eta - Estimated Time of Arrival. Epoch timestamp seconds since 1970\n* fdt - Field Departure Time. UNIX epoch timestamp seconds since 1970\n* firstPositionTime - Time when first reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970\n* fixes - intersections and/or VORs along the route (for example: SLS AMERO ARTOM VODIR NOTOS ULAPA ACA NUXCO OLULA PERAS ALIPO UPN GDL KEDMA BRISA CUL PERTI CEN PPE ALTAR ASUTA JLI RONLD LAADY WYVIL OLDEE RAL PDZ ARNES BASET WELLZ CIVET)\n* fp - unique identifier assigned by TripVair for this flight, aka fa_flight_id.\n* gs - ground speed at last reported position, in kts.\n* heading - direction of travel at last reported position.\n* hiLat - highest latitude travelled by flight.\n* hiLon - highest longitude travelled by flight.\n* ident - flight identifier or registration of aircraft.\n* lastPositionTime - Time when last reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970.\n* lat - latitude of last reported position.\n* lifeguard - true if a \"lifeguard\" rescue flight.\n* lon - longitude of last reported position.\n* lowLat - lowest latitude travelled by flight.\n* lowLon - lowest longitude travelled by flight.\n* ogta - Original Time of Arrival. UNIX epoch timestamp seconds since 1970\n* ogtd - Original Time of Departure. UNIX epoch timestamp seconds since 1970\n* orig - ICAO airport code of origin (for example: KIAH)\n* physClass - physical class (for example: J is jet)\n* prefix - A one or two character identifier prefix code (common values: G or GG Medevac, L Lifeguard, A Air Taxi, H Heavy, M Medium).\n* speed - ground speed, in kts.\n* status - Single letter code for current flight status, can be S Scheduled, F Filed, A Active, Z Completed, or X Cancelled.\n* updateType - data source of last position (P=projected, O=oceanic, Z=radar, A=ADS-B, M=multilateration, D=datalink, X=surface and near surface (ADS-B and ASDE-X), S=space-based).\n* waypoints - all of the intersections and VORs comprising the route\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Id may be missing or may not be fa_flight_id format.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658809-run"
      }
    },
    "/flights/{ident}/canonical": {
      "get": {
        "summary": "Get the canonical ident of a flight",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "When the ident parameter is a code that could map to multiple other codes,\nthis endpoint returns an array of information about all the possible codes.\nAn optional ident type and country code can be provided to refine ambiguous\nidents to a single result. The ident type should either be designator or\nregistration to describe the ident being passed in. The country code should\nrepresent a country the operator of the flight operates within.\n",
        "operationId": "get_flights_canonical",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "ident",
            "in": "path",
            "description": "The flight designator or aircraft registration",
            "required": true,
            "example": "B6109",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ident_type",
            "in": "query",
            "description": "Type of ident provided in the ident parameter",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "query",
            "description": "An ISO 3166-1 alpha-2 country code.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). ident, ident_type, or country_code may be invalid.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658810-run"
      }
    },
    "/flights/{id}/route": {
      "get": {
        "summary": "Get flight's filed route",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns information about a flight's filed route including coordinates,\nnames, and types of fixes along the route.  Not all flight routes can\nbe successfully decoded by this endpoint, particularly if the flight is\nnot entirely within the continental U.S. airspace, since this function\nonly has access to navaids within that area. If data on a waypoint is\nmissing then the type will be listed as \"UNKNOWN\".\n",
        "operationId": "get_flight_route",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The fa_flight_id to fetch",
            "required": true,
            "example": "UAL1234-1234567890-airline-0123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id may be missing or may not be fa_flight_id format.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "404": {
            "description": "No route is available for this flight.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658811-run"
      }
    },
    "/operators": {
      "get": {
        "summary": "Get all operators.",
        "x-apidog-folder": "TripVair AI API/v1/ops",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns list of operator references (ICAO/IATA codes and URLs to access\nmore information).\n",
        "operationId": "get_all_operators",
        "tags": [
          "TripVair AI API/v1/ops"
        ],
        "parameters": [
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of operators.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658812-run"
      }
    },
    "/flights/search": {
      "get": {
        "summary": "Search for flights",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Search for airborne flights by matching against various parameters including\ngeospatial data. Uses a simplified query syntax compared to\n/flights/search/advanced.\n",
        "operationId": "get_flights_by_search",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query to search for flights with a simplified syntax (compared to\n/flights/search/advanced). Query syntax allows filtering by\nlatitude/longitude box, aircraft ident with wildcards, type with\nwildcards, prefix, origin airport, destination airport, origin\nor destination airport, groundspeed, and altitude. It takes search\nterms in a single string comprising \"-key value\" pairs. Codeshares and\nalternate idents are NOT searched when using the -idents clause.\n\nKeys include:\n* `-prefix STRING`\n* `-type STRING`\n* `-idents STRING`\n* `-identOrReg STRING`\n* `-airline STRING`\n* `-destination STRING`\n* `-origin STRING`\n* `-originOrDestination STRING`\n* `-aboveAltitude INTEGER`\n* `-belowAltitude INTEGER`\n* `-aboveGroundspeed INTEGER`\n* `-belowGroundspeed INTEGER`\n* `-latlong \"MINLAT MINLON MAXLAT MAXLON\"`\n* `-filter {ga|airline}`\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Query may be empty.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658813-run"
      }
    },
    "/foresight/flights/search/advanced": {
      "get": {
        "summary": "Search for flights, responses include Foresight data",
        "x-apidog-folder": "TripVair AI API/v1/skymind",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns currently or recently airborne flights based on geospatial\nsearch parameters. If available, flights' predicted OOOI fields will be\nset.\n",
        "operationId": "get_flights_by_advanced_search_with_foresight",
        "tags": [
          "TripVair AI API/v1/skymind"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query to search for recent or airborne flights. Search criteria is only\napplied to the most recent position for a flight. This function only\nsearches flights within approximately the last 24 hours. The supported\noperators include (note that operators take different numbers of\narguments):\n\n* false - results must have the specified boolean key set to a value of false. Example: {false arrived}\n* true - results must have the specified boolean key set to a value of true. Example: {true lifeguard}\n* null - results must have the specified key set to a null value. Example: {null waypoints}\n* notnull - results must have the specified key not set to a null value. Example: {notnull aircraftType}\n* = - results must have a key that exactly matches the specified value. Example: {= aircraftType C172}\n* != - results must have a key that must not match the specified value. Example: {!= prefix H}\n* < - results must have a key that is lexicographically less-than a specified value. Example: {< arrivalTime 1276811040}\n* \\> - results must have a key that is lexicographically greater-than a specified value. Example: {> circles 5}\n* <= - results must have a key that is lexicographically less-than-or-equal-to a specified value. Example: {<= alt 8000}\n* \\>= - results must have a key that is lexicographically greater-than-or-equal-to a specified value.\n* match - results must have a key that matches against a case-insensitive wildcard pattern. Example: {match ident AAL*}\n* notmatch - results must have a key that does not match against a case-insensitive wildcard pattern. Example: {notmatch aircraftType B76*}\n* range - results must have a key that is numerically between the two specified values. Example: {range alt 8000 20000}\n* in - results must have a key that exactly matches one of the specified values. Example: {in orig {KLAX KBUR KSNA KLGB}}\n* orig_or_dest - results must have either the origin or destination key exactly match one of the specified values. Example: {orig_or_dest {KLAX KBUR KSNA KLGB}}\n* airline - results will only include airline flight if the argument is 1, or will only include GA flights if the argument is 0. Example: {airline 1}\n* aircraftType - results must have an aircraftType key that matches one of the specified case-insensitive wildcard patterns. Example: {aircraftType {B76* B77*}}\n* ident - results must have an ident key that matches one of the specified case-insensitive wildcard patterns. Example: {ident {N123* N456* AAL* UAL*}}\n* ident_or_reg - results must have an ident key or was known to be operated by an aircraft registration that matches one of the specified case-insensitive wildcard patterns. Example: {ident_or_reg {N123* N456* AAL* UAL*}}\n\nThe supported key names include (note that not all of these key names are returned in the result structure, and some have slightly different names):\n\n* actualDepartureTime - Actual time of departure, or null if not departed yet. UNIX epoch timestamp seconds since 1970\n* aircraftType - aircraft type ID (for example: B763)\n* alt - altitude at last reported position (hundreds of feet or Flight Level)\n* altChange - altitude change indication (for example: \"C\" if climbing, \"D\" if descending, and empty if it is level)\n* arrivalTime - Actual time of arrival, or null if not arrived yet. UNIX epoch timestamp seconds since 1970\n* arrived - true if the flight has arrived at its destination.\n* cancelled - true if the flight has been cancelled. The meaning of cancellation is that the flight is no longer being tracked by TripVair. There are a number of reasons a flight may be cancelled including cancellation by the airline, but that will not always be the case.\n* cdt - Controlled Departure Time, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970\n* clock - Time of last received position. UNIX epoch timestamp seconds since 1970\n* cta - Controlled Time of Arrival, set if there is a ground hold on the flight. UNIX epoch timestamp seconds since 1970\n* dest - ICAO airport code of destination (for example: KLAX)\n* edt - Estimated Departure Time. Epoch timestamp seconds since 1970\n* eta - Estimated Time of Arrival. Epoch timestamp seconds since 1970\n* fdt - Field Departure Time. UNIX epoch timestamp seconds since 1970\n* firstPositionTime - Time when first reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970\n* fixes - intersections and/or VORs along the route (for example: SLS AMERO ARTOM VODIR NOTOS ULAPA ACA NUXCO OLULA PERAS ALIPO UPN GDL KEDMA BRISA CUL PERTI CEN PPE ALTAR ASUTA JLI RONLD LAADY WYVIL OLDEE RAL PDZ ARNES BASET WELLZ CIVET)\n* fp - unique identifier assigned by TripVair for this flight, aka fa_flight_id.\n* gs - ground speed at last reported position, in kts.\n* heading - direction of travel at last reported position.\n* hiLat - highest latitude travelled by flight.\n* hiLon - highest longitude travelled by flight.\n* ident - flight identifier or registration of aircraft.\n* lastPositionTime - Time when last reported position was received, or 0 if no position has been received yet. Epoch timestamp seconds since 1970.\n* lat - latitude of last reported position.\n* lifeguard - true if a \"lifeguard\" rescue flight.\n* lon - longitude of last reported position.\n* lowLat - lowest latitude travelled by flight.\n* lowLon - lowest longitude travelled by flight.\n* ogta - Original Time of Arrival. UNIX epoch timestamp seconds since 1970\n* ogtd - Original Time of Departure. UNIX epoch timestamp seconds since 1970\n* orig - ICAO airport code of origin (for example: KIAH)\n* physClass - physical class (for example: J is jet)\n* prefix - A one or two character identifier prefix code (common values: G or GG Medevac, L Lifeguard, A Air Taxi, H Heavy, M Medium).\n* speed - ground speed, in kts.\n* status - Single letter code for current flight status, can be S Scheduled, F Filed, A Active, Z Completed, or X Cancelled.\n* updateType - data source of last position (P=projected, O=oceanic, Z=radar, A=ADS-B, M=multilateration, D=datalink, X=surface and near surface (ADS-B and ASDE-X), S=space-based).\n* waypoints - all of the intersections and VORs comprising the route\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Query may be incorrect.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658814-run"
      }
    },
    "/foresight/flights/{ident}": {
      "get": {
        "summary": "Get information for a flight, including Foresight data",
        "x-apidog-folder": "TripVair AI API/v1/skymind",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns the flight info status summary for a registration, ident, or\nfa_flight_id, including all available predicted fields.  If a\nfa_flight_id is specified then a maximum of 1 flight is returned,\nunless the flight has been diverted in which case both the original\nflight and any diversions will be returned with a duplicate fa_flight_id.\n",
        "operationId": "get_flight_with_foresight",
        "tags": [
          "TripVair AI API/v1/skymind"
        ],
        "parameters": [
          {
            "name": "ident",
            "in": "path",
            "description": "The ident, registration, or fa_flight_id to fetch",
            "required": true,
            "example": "UAL4",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ident_type",
            "in": "query",
            "description": "Type of ident provided in the ident parameter. By default, the passed\nident is interpreted as a registration if possible. This parameter can\nforce the ident to be interpreted as a designator instead.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results, comparing against flights'\n`scheduled_out` field (or `scheduled_off` if `scheduled_out` is\nmissing). The format is ISO8601 date or datetime, and the bound is\ninclusive. Specified start date must be no further than 10 days in the\npast and 2 days in the future. If not specified, will default to\ndepartures starting approximately 11 days in the past. If using date\ninstead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results, comparing against flights'\n`scheduled_out` field (or `scheduled_off` if `scheduled_out` is\nmissing). The format is ISO8601 date or datetime, and the bound is\nexclusive. Specified end date must be no further than 10 days in the\npast and 2 days in the future. If not specified, will default to\ndepartures starting approximately 2 days in the future. If using date\ninstead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Ident may be missing or not in fa_flight_id format or pages may be < 1.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658815-run"
      }
    },
    "/operators/{id}": {
      "get": {
        "summary": "Get static information for an operator.",
        "x-apidog-folder": "TripVair AI API/v1/ops",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns information for an operator such as their name, ICAO/IATA\ncodes, headquarter location, etc.\n",
        "operationId": "get_operator",
        "tags": [
          "TripVair AI API/v1/ops"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ICAO or IATA identifier for an operator. The use of ICAO code is\nstrongly preferred. In the case of non-unique IATA codes the operator\nwith the lexicographically first ICAO code will be returned.\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid operator code and cannot be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "404": {
            "description": "No such operator exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658816-run"
      }
    },
    "/foresight/flights/{id}/position": {
      "get": {
        "summary": "Get flight's current position, including Foresight data",
        "x-apidog-folder": "TripVair AI API/v1/skymind",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns the latest position for a flight",
        "operationId": "get_flight_position_with_foresight",
        "tags": [
          "TripVair AI API/v1/skymind"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The fa_flight_id to fetch",
            "required": true,
            "example": "UAL1234-1234567890-airline-0123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id may be missing or may not be fa_flight_id format. Query may be incorrect.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658817-run"
      }
    },
    "/operators/{id}/canonical": {
      "get": {
        "summary": "Get the canonical code of an operator for API usage.",
        "x-apidog-folder": "TripVair AI API/v1/ops",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns all possible matches for a given operator code (ICAO or IATA).\nAn optional country code can be provided to refine ambiguous IATA codes\nto a single result. The country code should represent a country the\noperator operates within.\n",
        "operationId": "get_operators_canonical",
        "tags": [
          "TripVair AI API/v1/ops"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ICAO or IATA identifier for an operator. The use of ICAO code is\nstrongly preferred. In the case of non-unique IATA codes the operator\nwith the lexicographically first ICAO code will be returned.\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "query",
            "description": "An ISO 3166-1 alpha-2 country code.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id or country_code). Id must be a valid operator code and cannot be empty.\nCountry code must represent a country the operator operates within.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "404": {
            "description": "No such operator exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658818-run"
      }
    },
    "/operators/{id}/flights": {
      "get": {
        "summary": "Get all of an operator's flights",
        "x-apidog-folder": "TripVair AI API/v1/ops",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns all recent and upcoming flights for this operator. Behaviour for\noptional start and end dates for each type returned (`scheduled`, `arrivals`,\n`enroute`) match the behaviour in their corresponding endpoints.\n",
        "operationId": "get_operator_flights",
        "tags": [
          "TripVair AI API/v1/ops"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ICAO or IATA identifier for an operator. The use of ICAO code is\nstrongly preferred. In the case of non-unique IATA codes the operator\nwith the lexicographically first ICAO code will be returned.\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results. The format is ISO8601 date\nor datetime, and the bound is inclusive. Specified start date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results. The format is ISO8601 date or\ndatetime, and the bound is exclusive. Specified end date must be no\nfurther than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operator's flights.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid operator code and cannot be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "404": {
            "description": "No such operator exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658819-run"
      }
    },
    "/operators/{id}/flights/scheduled": {
      "get": {
        "summary": "Get scheduled flights",
        "x-apidog-folder": "TripVair AI API/v1/ops",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns flights for this operator that are scheduled to depart or have\nrecently been cancelled, ordered by `estimated_off` (or `scheduled_off`\nif `estimated_off` is missing) ascending. The optional start and end\nparameters will be compared against `scheduled_off` to limit the\nflights returned. If start is not specified, flights with a\n`scheduled_off` or cancellation time no further than two hours into the\npast will be returned. If end is not specified, there is no guaranteed\nbound for how far in the future scheduled flights will be returned (it\nwill typically be around 48 hours in the future for commercial flights,\nthough).\n",
        "operationId": "get_operator_flights_scheduled",
        "tags": [
          "TripVair AI API/v1/ops"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ICAO or IATA identifier for an operator. The use of ICAO code is\nstrongly preferred. In the case of non-unique IATA codes the operator\nwith the lexicographically first ICAO code will be returned.\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results. The format is ISO8601 date\nor datetime, and the bound is inclusive. Specified start date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results. The format is ISO8601 date or\ndatetime, and the bound is exclusive. Specified end date must be no\nfurther than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid operator code and cannot be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "404": {
            "description": "No such operator exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658820-run"
      }
    },
    "/operators/{id}/flights/arrivals": {
      "get": {
        "summary": "Get arrived flights",
        "x-apidog-folder": "TripVair AI API/v1/ops",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns flights for this operator that have departed and subsequently\narrived, ordered by `actual_on` descending. The optional start and end\nparameters will be compared against `actual_on` to limit the flights\nreturned. The start parameter's default value is 24 hours before the\ncurrent time. The end parameter's default value is the current time.\n",
        "operationId": "get_operator_flights_arrived",
        "tags": [
          "TripVair AI API/v1/ops"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ICAO or IATA identifier for an operator. The use of ICAO code is\nstrongly preferred. In the case of non-unique IATA codes the operator\nwith the lexicographically first ICAO code will be returned.\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results. The format is ISO8601 date\nor datetime, and the bound is inclusive. Specified start date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results. The format is ISO8601 date or\ndatetime, and the bound is exclusive. Specified end date must be no\nfurther than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arrived flights.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid operator code and cannot be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "404": {
            "description": "No such operator exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658821-run"
      }
    },
    "/operators/{id}/flights/counts": {
      "get": {
        "summary": "Get flight counts for operator",
        "x-apidog-folder": "TripVair AI API/v1/ops",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns counts of both airborne and recently operated flights for\noperator.\n",
        "operationId": "get_operator_flights_count",
        "tags": [
          "TripVair AI API/v1/ops"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ICAO or IATA identifier for an operator. The use of ICAO code is\nstrongly preferred. In the case of non-unique IATA codes the operator\nwith the lexicographically first ICAO code will be returned.\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid operator code and cannot be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "404": {
            "description": "No such operator exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658822-run"
      }
    },
    "/operators/{id}/flights/enroute": {
      "get": {
        "summary": "Get en route flights",
        "x-apidog-folder": "TripVair AI API/v1/ops",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns flights for this operator that have departed and are currently\nen route, ordered by `estimated_on` ascending. The optional start and\nend parameters will be compared against `estimated_on` to limit the\nflights returned. The start parameter's default value is 48 hours\nbefore the current time (this accounts for delayed flights). There is\nno default end bound.\n",
        "operationId": "get_operator_flights_enroute",
        "tags": [
          "TripVair AI API/v1/ops"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ICAO or IATA identifier for an operator. The use of ICAO code is\nstrongly preferred. In the case of non-unique IATA codes the operator\nwith the lexicographically first ICAO code will be returned.\n",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting date range for flight results. The format is ISO8601 date\nor datetime, and the bound is inclusive. Specified start date must be\nno further than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The ending date range for flight results. The format is ISO8601 date or\ndatetime, and the bound is exclusive. Specified end date must be no\nfurther than 10 days in the past and 2 days in the future. If using\ndate instead of datetime, the time will default to 00:00:00Z.\n",
            "required": false,
            "example": "\"2021-12-31T19:59:59.000Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "En route flights.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id must be a valid operator code and cannot be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "404": {
            "description": "No such operator exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658823-run"
      }
    },
    "/flights/{id}/track": {
      "get": {
        "summary": "Get flight's track",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns the track for a flight as an array of positions.",
        "operationId": "get_flight_track",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The fa_flight_id to fetch",
            "required": true,
            "example": "UAL1234-1234567890-airline-0123",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_estimated_positions",
            "in": "query",
            "description": "Whether to include estimated positions in the flight track",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Id may be missing or may not be fa_flight_id format. Aircraft may be blocked.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658824-run"
      }
    },
    "/flights/search/positions": {
      "get": {
        "summary": "Search for flight positions",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns flight positions based on geospatial search parameters.  This\nallows you to locate flights that have ever flown within a specific a\nlatitude/longitude box, groundspeed, and altitude. It takes search\nterms in a single string comprising of {operator key value} elements\nand returns an array of flight structures. Each search term must be\nenclosed in curly braces. Multiple search terms can be combined in an\nimplicit boolean \"and\" by separating the terms with at least one space.\nThis function only searches flight data representing approximately the\nlast 24 hours.\n\nThe supported operators include (note that operators take different numbers of arguments):\n\n* false - results must have the specified boolean key set to a value of false. Example: {false preferred}\n* true - results must have the specified boolean key set to a value of true. Example: {true preferred}\n* null - results must have the specified key set to a null value. Example: {null waypoints}\n* notnull - results must have the specified key not set to a null value. Example: {notnull aircraftType}\n* = - results must have a key that exactly matches the specified value. Example: {= fp C172}\n* != - results must have a key that must not match the specified value. Example: {!= prefix H}\n* < - results must have a key that is lexicographically less-than a specified value. Example: {< arrivalTime 1276811040}\n* \\> - results must have a key that is lexicographically greater-than a specified value. Example: {> circles 5}\n* <= - results must have a key that is lexicographically less-than-or-equal-to a specified value. Example: {<= alt 8000}\n* \\>= - results must have a key that is lexicographically greater-than-or-equal-to a specified value.\n* match - results must have a key that matches against a case-insensitive wildcard pattern. Example: {match ident AAL*}\n* notmatch - results must have a key that does not match against a case-insensitive wildcard pattern. Example: {notmatch aircraftType B76*}\n* range - results must have a key that is numerically between the two specified values. Example: {range alt 8000 20000}\n* in - results must have a key that exactly matches one of the specified values. Example: {in orig {KLAX KBUR KSNA KLGB}}\n\nThe supported key names include (note that not all of these key names are returned in the result structure, and some have slightly different names):\n\n* alt - Altitude, measured in hundreds of feet or Flight Level.\n* altChange - a one-character code indicating the change in altitude.\n* cid - a three-character cid code\n* clock - UNIX epoch timestamp seconds since 1970\n* fp - unique identifier assigned by TripVair for this flight, aka fa_flight_id.\n* gs - ground speed, measured in kts.\n* lat - latitude of the reported position.\n* lon - longitude of the reported position\n* updateType - source of the last reported position (P=projected, O=oceanic, Z=radar, A=ADS-B, M=multilateration, D=datalink, X=surface and near surface (ADS-B and ASDE-X), S=space-based)\n",
        "operationId": "get_flights_by_position_search",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query to search for flight positions. Search criteria is applied\nagainst all positions of a flight. This function only searches\nflights within approximately the last 24 hours. The supported\noperators include (note that operators take different numbers of\narguments):\n\n* false - results must have the specified boolean key set to a value of false. Example: {false preferred}\n* true - results must have the specified boolean key set to a value of true. Example: {true preferred}\n* null - results must have the specified key set to a null value. Example: {null waypoints}\n* notnull - results must have the specified key not set to a null value. Example: {notnull aircraftType}\n* = - results must have a key that exactly matches the specified value. Example: {= fp C172}\n* != - results must have a key that must not match the specified value. Example: {!= prefix H}\n* < - results must have a key that is lexicographically less-than a specified value. Example: {< arrivalTime 1276811040}\n* \\> - results must have a key that is lexicographically greater-than a specified value. Example: {> circles 5}\n* <= - results must have a key that is lexicographically less-than-or-equal-to a specified value. Example: {<= alt 8000}\n* \\>= - results must have a key that is lexicographically greater-than-or-equal-to a specified value.\n* match - results must have a key that matches against a case-insensitive wildcard pattern. Example: {match ident AAL*}\n* notmatch - results must have a key that does not match against a case-insensitive wildcard pattern. Example: {notmatch aircraftType B76*}\n* range - results must have a key that is numerically between the two specified values. Example: {range alt 8000 20000}\n* in - results must have a key that exactly matches one of the specified values. Example: {in orig {KLAX KBUR KSNA KLGB}}\n\nThe supported key names include (note that not all of these key names are returned in the result structure, and some have slightly different names):\n\n* alt - Altitude, measured in hundreds of feet or Flight Level.\n* altChange - a one-character code indicating the change in altitude.\n* altMax - Altitude, measured in hundreds of feet or Flight Level.\n* cid - a three-character cid code\n* cidfac - a four-character cidfac code\n* clock - UNIX epoch timestamp seconds since 1970\n* fp - unique identifier assigned by TripVair for this flight, aka fa_flight_id.\n* gs - ground speed, measured in kts.\n* lat - latitude of the reported position.\n* lon - longitude of the reported position\n* preferred - boolean indicator of position quality\n* recvd - UNIX epoch timestamp seconds since 1970\n* updateType - source of the last reported position (P=projected, O=oceanic, Z=radar, A=ADS-B, M=multilateration, D=datalink, X=surface and near surface (ADS-B and ASDE-X), S=space-based)\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unique_flights",
            "in": "query",
            "description": "Whether to return only a single position per unique fa_flight_id.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_pages",
            "in": "query",
            "description": "Maximum number of pages to fetch. This is an upper limit and not a guarantee of how many pages will be returned.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Opaque value used to get the next batch of data from a paged collection.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Expected: pages > 0.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658825-run"
      }
    },
    "/flights/search/count": {
      "get": {
        "summary": "Get count of flights matching search parameters",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Full search query documentation is available at the /flights/search\nendpoint.\n",
        "operationId": "get_flights_count_by_search",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query to search for flights with a simplified syntax (compared to\n/flights/search/advanced). Query syntax allows filtering by\nlatitude/longitude box, aircraft ident with wildcards, type with\nwildcards, prefix, origin airport, destination airport, origin\nor destination airport, groundspeed, and altitude. It takes search\nterms in a single string comprising \"-key value\" pairs. Codeshares and\nalternate idents are NOT searched when using the -idents clause.\n\nKeys include:\n* `-prefix STRING`\n* `-type STRING`\n* `-idents STRING`\n* `-identOrReg STRING`\n* `-airline STRING`\n* `-destination STRING`\n* `-origin STRING`\n* `-originOrDestination STRING`\n* `-aboveAltitude INTEGER`\n* `-belowAltitude INTEGER`\n* `-aboveGroundspeed INTEGER`\n* `-belowGroundspeed INTEGER`\n* `-latlong \"MINLAT MINLON MAXLAT MAXLON\"`\n* `-filter {ga|airline}`\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658826-run"
      }
    },
    "/flights/{ident}/intents": {
      "post": {
        "summary": "Submit a Flight Intent",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "This operation informs TripVair of an upcoming (or recently\ndeparted) flight. This information is used solely by TripVair for\nimproving the accuracy of flight tracking. This method does not\ntransmit to any ANSP/ATC facility for flight separation or operational\nservices. Access to this endpoint requires special account\nauthorization. The TripVair account must also be subscribed to\nTripVair Global and the specified registration or ident must be on\nthe Global account.\n",
        "operationId": "post_flights_by_ident",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "ident",
            "in": "path",
            "description": "The ident or registration of the Flight Intent",
            "required": true,
            "example": "RPA4854",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlightIntent"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter(s). Ident may be missing or pages may be < 1. Body may be incomplete. User may lack permissions to post flight intent for this ident. Arrival/departure times, duration, or aircraft type may be invalid.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658827-run"
      }
    },
    "/flights/{id}/map": {
      "get": {
        "summary": "Get an image of a flight's track on a map",
        "x-apidog-folder": "TripVair AI API/v1/flights",
        "x-apidog-status": "released",
        "deprecated": false,
        "description": "Returns a flight's track as a base64-encoded image. Image can contain a\nvariety of additional data layers beyond just the track.\n",
        "operationId": "get_flight_map",
        "tags": [
          "TripVair AI API/v1/flights"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The fa_flight_id to fetch",
            "required": true,
            "example": "UAL1234-1234567890-airline-0123",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Height of requested image (pixels)",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Width of requested image (pixels)",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "layer_on",
            "in": "query",
            "description": "List of map layers to enable",
            "required": false,
            "example": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "layer_off",
            "in": "query",
            "description": "List of map layers to disable",
            "required": false,
            "example": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "show_data_block",
            "in": "query",
            "description": "Whether a textual caption containing the ident, type, heading,\naltitude, origin, and destination should be displayed by the flight's\nposition.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "airports_expand_view",
            "in": "query",
            "description": "Whether to force zoom area to ensure origin/destination airports are\nvisible. Enabling this flag forcefully enables the show_airports flag\nas well.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "show_airports",
            "in": "query",
            "description": "Whether to show the origin/destination airports for the flight as\nlabeled points on the map.\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bounding_box",
            "in": "query",
            "description": "Manually specify the zoom area of the map using custom bounds. Should\nbe a list of 4 coordinates representing the top, right, bottom, and\nleft sides of the area (in that order).\n",
            "required": false,
            "example": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          },
          "400": {
            "description": "Incorrect parameter (id). Id may be missing or may not be fa_flight_id format. Bounding box corners may be incorrectly defined.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apidog-orders": [],
                  "x-apidog-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apidog": "https://www.apidog.com/web/project/347663/apis/api-3658828-run"
      }
    }
  },
  "components": {
    "schemas": {
      "FlightIntent": {
        "title": "FlightIntent",
        "required": [
          "aircraft_type",
          "destination",
          "intended_off",
          "intended_on",
          "origin"
        ],
        "type": "object",
        "properties": {
          "aircraft_type": {
            "type": "string",
            "description": "Aircraft type ICAO code.",
            "examples": [
              "C162"
            ]
          },
          "origin": {
            "type": "string",
            "description": "Origin airport ICAO code or LID.",
            "examples": [
              "KSGR"
            ]
          },
          "destination": {
            "type": "string",
            "description": "Destination airport ICAO code or LID.",
            "examples": [
              "50R"
            ]
          },
          "intended_off": {
            "type": "string",
            "description": "Intended runway departure time of flight. This must be within 2 hours of\nthe actual departure time or the flight intent will be ignored. Time may\nnot be more than 1 hour in the past or 48 hours in the future.\n",
            "format": "date-time",
            "examples": [
              "2021-10-16T21:30:00.000Z"
            ]
          },
          "intended_on": {
            "type": "string",
            "description": "Intended runway arrival time of flight.",
            "format": "date-time",
            "examples": [
              "2021-10-16T22:50:00.000Z"
            ]
          },
          "altitude": {
            "type": "integer",
            "description": "Cruising altitude (feet).",
            "examples": [
              3500
            ]
          },
          "airspeed": {
            "type": "integer",
            "description": "Cruising airspeed (knots).",
            "examples": [
              86
            ]
          },
          "route": {
            "type": "string",
            "description": "Flight route as a series of space-separate waypoints.",
            "examples": [
              "MAPGP VICUC"
            ]
          }
        },
        "x-apidog-orders": [
          "aircraft_type",
          "origin",
          "destination",
          "intended_off",
          "intended_on",
          "altitude",
          "airspeed",
          "route"
        ],
        "x-apidog-folder": "Schemas",
        "x-apidog-ignore-properties": []
      }
    }
  },
  "servers": []
}